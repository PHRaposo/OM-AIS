; OM File Header - Saved 2021/02/10 20:01:53
; (6.17 :patc (om-make-point 27 83) (om-make-point 595 44) (om-make-point 746 589) "" 183 0 "2021/02/10 19:59:03" "2021/02/10 20:01:53")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-AIS" "OMCS")))(setf *om-current-persistent* (om-load-patch1 "Link-chords" (quote ((let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 315 511) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 182 43) (quote "INDEX-RULE: LINK-CHORDS-2") nil (om-make-point 568 116) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 69 136) (om-make-point 37 30) (list 0) "(0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 57 51) (om-make-point 149 30) (list 11 10 9 8 7 5 4 3 2 1) "(11 10 9 8 7 5 4 3 2 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 111 133) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 154 93) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 107 236) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 72 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WILDCARD-RULE 2" (quote omcs::wildcard-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil))) (om-make-point 228 135) (om-make-point 60 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WILDCARD-RULE" (quote omcs::wildcard-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil))) (om-make-point 306 138) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PMC-ENGINE" (quote omcs::pmc-engine) (quote ((om-load-inputfun (quote input-funbox) "s-space" "S-SPACE" nil) (om-load-inputfun (quote input-funbox) "rules" "RULES" nil) (om-load-inputfun (quote input-funbox) "heuristic-rules" "HEURISTIC-RULES" nil) (om-load-inputfun (quote input-funbox) "fwc-rules" "FWC-RULES" nil) (om-load-inputfun (quote input-funbox) "sols-mode" "SOLS-MODE" (quote :all)) (om-load-inputfun (quote input-funbox) "random?" "RND?" nil) (om-load-inputfun (quote input-funbox) "print-indexnr?" "PRINT-FL" nil))) (om-make-point 152 336) (om-make-point 378 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 175 179) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 172 138) (om-make-point 37 30) (list 6) "(6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 228 261) (om-make-point 93 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 375 302) (om-make-point 38 30) (quote :all) ":all" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "no-dup-notes" (om-load-patch-abs1 "no-dup-notes" (quote ((let ((box (om-load-boxcall (quote lispfun) "NOT 2" (quote not) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 154 209) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MEMBER" (quote member) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 142 140) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 72 7) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 192 82) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REV-PARTIAL-SOLUTION" (quote omcs::rev-partial-solution) (quote nil) (om-make-point 195 3) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 143 279) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 1 1 nil 0) (4 0 3 0 nil 0) (0 0 5 0 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 219 57) nil (list nil) "l" "no-dup-notes"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "no-dup-intervals" (om-load-patch-abs1 "no-dup-intervals" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 107 156) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 67 96) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "<=" (quote <=) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 78 199) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 21 442) (om-make-point 274 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 147 402) (om-make-point 24 30) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 198 97) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 127 98) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MEMBER" (quote member) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 202 328) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NOT" (quote not) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 214 381) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 266 279) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 252 144) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD 2" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 245 181) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 257 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 291 96) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 206 171) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 176 212) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 164 163) (om-make-point 24 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REV-PARTIAL-SOLUTION" (quote omcs::rev-partial-solution) (quote nil) (om-make-point 126 0) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 134 514) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((17 0 1 0 nil 0) (1 0 2 0 nil 0) (0 0 2 1 nil 0) (2 0 3 0 nil 0) (4 0 3 1 nil 0) (8 0 3 2 nil 0) (17 0 5 0 nil 0) (17 0 6 0 nil 0) (15 0 7 0 nil 0) (9 0 7 1 nil 0) (7 0 8 0 nil 0) (12 0 9 0 nil 0) (10 0 11 1 nil 0) (11 0 12 0 nil 0) (13 0 12 1 nil 0) (17 0 13 0 nil 0) (16 0 15 0 nil 0) (14 0 15 1 nil 0) (6 0 16 0 nil 0) (5 0 16 1 nil 0) (3 0 18 0 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 298 58) nil (list nil) "l" "no-dup-intervals"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "ADITIONAL-INDEX-RULES" (om-load-patch-abs1 "ADITIONAL-INDEX-RULES" (quote ((let ((box (om-load-boxout "output 4" 4 (om-make-point 1093 245) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "LINK-CHORDS-2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 1069 42) (om-make-point 177 30) (list 1 2 3 4 5 6 7 8 9 10 11 12) "(1 2 3 4 5 6 7 8 9 10 11 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INDEX-RULE 4" (quote omcs::index-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "list" "INDEX-NUMBERS" (list 1)))) (om-make-point 1113 153) (om-make-point 64 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "LINK-CHORDS-2" (om-load-patch-abs1 "LINK-CHORDS-2" (quote ((let ((box (om-load-boxcall (quote genfun) "OMAND 6" (quote omand) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 849 545) (om-make-point 26 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 896 494) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 7" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 136) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 345 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 160 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 149 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 2 0 nil 0) (2 0 3 1 nil 0) (2 0 3 2 nil 0) (1 0 3 3 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1831/2 374) nil nil nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMAND 5" (quote omand) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 749 545) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMAND 4" (quote omand) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 639 546) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMAND 3" (quote omand) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 514 546) (om-make-point 27 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMAND 2" (quote omand) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 399 546) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMAND" (quote omand) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 293 545) (om-make-point 25 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 7" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 792 494) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 6" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 691 496) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 5" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 581 494) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 4" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 447 494) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 3" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 339 495) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 6" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 136) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 345 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 160 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 149 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 2 0 nil 0) (2 0 3 1 nil 0) (2 0 3 2 nil 0) (1 0 3 3 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1543/2 374) nil nil nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 5" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 136) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 345 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 160 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 149 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 2 0 nil 0) (2 0 3 1 nil 0) (2 0 3 2 nil 0) (1 0 3 3 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1341/2 374) nil nil nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 4" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 136) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 345 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 160 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 149 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 2 0 nil 0) (2 0 3 1 nil 0) (2 0 3 2 nil 0) (1 0 3 3 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1123/2 374) nil nil nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 3" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 136) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 345 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 160 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 149 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 2 0 nil 0) (2 0 3 1 nil 0) (2 0 3 2 nil 0) (1 0 3 3 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 853/2 374) nil nil nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 2" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 136) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 345 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 160 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 149 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 2 0 nil 0) (2 0 3 1 nil 0) (2 0 3 2 nil 0) (1 0 3 3 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 637/2 374) nil nil nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMOR" (quote omor) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 556 605) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 555 287) (om-make-point 88 59) nil nil nil 7))) (setf (numouts box) 7) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 577 241) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 555 154) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 507 172) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-ROTATIONS" (quote om-ais::all-rotations) (quote ((om-load-inputfun (quote input-funbox) "AIS - list of pitch-classes" "PCS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 633 164) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 173 323) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 195 29) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 160 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 149 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 2 0 nil 0) (2 0 3 1 nil 0) (2 0 3 2 nil 0) (1 0 3 3 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 421/2 374) nil nil nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 2" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 231 495) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 12" 11 (om-make-point 1061 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 11" 10 (om-make-point 972 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 10" 9 (om-make-point 883 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 9" 8 (om-make-point 797 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 8" 7 (om-make-point 708 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 7" 6 (om-make-point 619 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 562 647) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 18 113) (om-make-point 1157 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 6" 5 (om-make-point 530 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 5" 4 (om-make-point 441 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 4" 3 (om-make-point 352 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 263 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 174 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 91 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 1012 435) (om-make-point 64 30) (quote |6-Z17|) "|6-Z17|" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 0) (1 0 0 1 nil 0) (2 0 1 0 nil 0) (40 0 1 1 nil 0) (19 6 2 0 nil 0) (9 0 3 0 nil 0) (8 0 3 1 nil 0) (10 0 4 0 nil 0) (9 0 4 1 nil 0) (11 0 5 0 nil 0) (10 0 5 1 nil 0) (12 0 6 0 nil 0) (11 0 6 1 nil 0) (25 0 7 0 nil 0) (12 0 7 1 nil 0) (13 0 8 0 nil 0) (40 0 8 1 nil 0) (14 0 9 0 nil 0) (40 0 9 1 nil 0) (15 0 10 0 nil 0) (40 0 10 1 nil 0) (16 0 11 0 nil 0) (40 0 11 1 nil 0) (17 0 12 0 nil 0) (40 0 12 1 nil 0) (19 5 13 0 nil 0) (19 4 14 0 nil 0) (19 3 15 0 nil 0) (19 2 16 0 nil 0) (19 1 17 0 nil 0) (7 0 18 0 nil 0) (6 0 18 1 nil 0) (5 0 18 2 nil 0) (4 0 18 3 nil 0) (3 0 18 4 nil 0) (0 0 18 5 nil 0) (20 0 19 0 nil 0) (22 0 20 0 nil 0) (23 0 20 1 nil 0) (21 0 22 1 nil 0) (33 0 23 0 nil 0) (19 0 24 0 nil 0) (24 0 25 0 nil 0) (40 0 25 1 nil 0) (18 0 32 0 nil 0) (39 0 33 0 nil 0) (38 0 33 1 nil 0) (37 0 33 2 nil 0) (36 0 33 3 nil 0) (35 0 33 4 nil 0) (34 0 33 5 nil 0) (31 0 33 6 nil 0) (30 0 33 7 nil 0) (29 0 33 8 nil 0) (28 0 33 9 nil 0) (27 0 33 10 nil 0) (26 0 33 11 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil) (om-load-inputfun (quote input-funbox) "" "input 5" nil) (om-load-inputfun (quote input-funbox) "" "input 6" nil) (om-load-inputfun (quote input-funbox) "" "input 7" nil) (om-load-inputfun (quote input-funbox) "" "input 8" nil) (om-load-inputfun (quote input-funbox) "" "input 9" nil) (om-load-inputfun (quote input-funbox) "" "input 10" nil) (om-load-inputfun (quote input-funbox) "" "input 11" nil) (om-load-inputfun (quote input-funbox) "" "input 12" nil))) (om-make-point 7170/7 70) nil (list nil) "l" "LINK-CHORDS-2"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 3 (om-make-point 889 239) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "LINK-CHORDS-1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "LINK-CHORDS-1" (om-load-patch-abs1 "LINK-CHORDS-1" (quote ((let ((box (om-load-boxcall (quote lispfun) "EQUAL 7" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 858 505) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 6" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 755 507) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 5" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 645 505) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 4" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 511 505) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 3" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 403 506) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 6" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 136) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 345 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 160 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 149 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 2 0 nil 0) (2 0 3 1 nil 0) (2 0 3 2 nil 0) (1 0 3 3 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1675/2 369) nil nil nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 5" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 136) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 345 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 160 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 149 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 2 0 nil 0) (2 0 3 1 nil 0) (2 0 3 2 nil 0) (1 0 3 3 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1471/2 369) nil nil nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 4" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 136) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 345 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 160 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 149 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 2 0 nil 0) (2 0 3 1 nil 0) (2 0 3 2 nil 0) (1 0 3 3 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1251/2 369) nil nil nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 3" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 136) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 345 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 160 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 149 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 2 0 nil 0) (2 0 3 1 nil 0) (2 0 3 2 nil 0) (1 0 3 3 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 983/2 368) nil nil nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 2" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 136) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 345 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 160 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 149 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 2 0 nil 0) (2 0 3 1 nil 0) (2 0 3 2 nil 0) (1 0 3 3 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 765/2 369) nil nil nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMOR" (quote omor) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 567 573) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 560 287) nil nil nil nil 6))) (setf (numouts box) 6) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 578 241) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 555 154) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 507 172) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-ROTATIONS" (quote om-ais::all-rotations) (quote ((om-load-inputfun (quote input-funbox) "AIS - list of pitch-classes" "PCS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 633 165) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 173 323) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 195 29) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 160 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 149 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 2 0 nil 0) (2 0 3 1 nil 0) (2 0 3 2 nil 0) (1 0 3 3 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 549/2 369) nil nil nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 2" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 295 506) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 12" 11 (om-make-point 1061 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 11" 10 (om-make-point 972 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 10" 9 (om-make-point 883 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 9" 8 (om-make-point 797 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 8" 7 (om-make-point 708 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 7" 6 (om-make-point 619 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 573 624) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 18 113) (om-make-point 1157 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 6" 5 (om-make-point 530 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 5" 4 (om-make-point 441 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 4" 3 (om-make-point 352 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 263 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 174 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 91 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 906 438) (om-make-point 64 30) (quote |6-Z17|) "|6-Z17|" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (32 0 0 1 nil 0) (6 0 1 0 nil 0) (32 0 1 1 nil 0) (7 0 2 0 nil 0) (32 0 2 1 nil 0) (8 0 3 0 nil 0) (32 0 3 1 nil 0) (9 0 4 0 nil 0) (32 0 4 1 nil 0) (11 5 5 0 nil 0) (11 4 6 0 nil 0) (11 3 7 0 nil 0) (11 2 8 0 nil 0) (11 1 9 0 nil 0) (17 0 10 0 nil 0) (4 0 10 1 nil 0) (3 0 10 2 nil 0) (2 0 10 3 nil 0) (1 0 10 4 nil 0) (0 0 10 5 nil 0) (12 0 11 0 nil 0) (14 0 12 0 nil 0) (15 0 12 1 nil 0) (13 0 14 1 nil 0) (25 0 15 0 nil 0) (11 0 16 0 nil 0) (16 0 17 0 nil 0) (32 0 17 1 nil 0) (10 0 24 0 nil 0) (31 0 25 0 nil 0) (30 0 25 1 nil 0) (29 0 25 2 nil 0) (28 0 25 3 nil 0) (27 0 25 4 nil 0) (26 0 25 5 nil 0) (23 0 25 6 nil 0) (22 0 25 7 nil 0) (21 0 25 8 nil 0) (20 0 25 9 nil 0) (19 0 25 10 nil 0) (18 0 25 11 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil) (om-load-inputfun (quote input-funbox) "" "input 5" nil) (om-load-inputfun (quote input-funbox) "" "input 6" nil) (om-load-inputfun (quote input-funbox) "" "input 7" nil) (om-load-inputfun (quote input-funbox) "" "input 8" nil) (om-load-inputfun (quote input-funbox) "" "input 9" nil) (om-load-inputfun (quote input-funbox) "" "input 10" nil) (om-load-inputfun (quote input-funbox) "" "input 11" nil) (om-load-inputfun (quote input-funbox) "" "input 12" nil))) (om-make-point 5756/7 62) nil (list nil) "l" "LINK-CHORDS-1"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INDEX-RULE 3" (quote omcs::index-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "list" "INDEX-NUMBERS" (list 1)))) (om-make-point 909 145) (om-make-point 64 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 865 34) (om-make-point 177 30) (list 1 2 3 4 5 6 7 8 9 10 11 12) "(1 2 3 4 5 6 7 8 9 10 11 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 5" 2 (om-make-point 639 247) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "QRMI-INVARIANT" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "QRMI-INVARIANT" (om-load-patch-abs1 "QRMI-INVARIANT" (quote ((let ((box (om-load-boxcall (quote genfun) "IM-AIS" (quote om-ais::im-ais) (quote ((om-load-inputfun (quote input-funbox) "AIS" "AIS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 382 286) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "QR-AIS" (quote om-ais::qr-ais) (quote ((om-load-inputfun (quote input-funbox) "AIS" "AIS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 385 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 305 418) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 310 364) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 265 160) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 12" 11 (om-make-point 576 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 11" 10 (om-make-point 526 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 10" 9 (om-make-point 476 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 9" 8 (om-make-point 426 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 8" 7 (om-make-point 376 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 7" 6 (om-make-point 326 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 6" 5 (om-make-point 276 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 5" 4 (om-make-point 226 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 4" 3 (om-make-point 176 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 126 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 76 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 26 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (4 0 1 0 nil 0) (3 0 2 0 nil 0) (4 0 3 0 nil 0) (0 0 3 1 nil 0) (16 0 4 0 nil 0) (15 0 4 1 nil 0) (14 0 4 2 nil 0) (13 0 4 3 nil 0) (12 0 4 4 nil 0) (11 0 4 5 nil 0) (10 0 4 6 nil 0) (9 0 4 7 nil 0) (8 0 4 8 nil 0) (7 0 4 9 nil 0) (6 0 4 10 nil 0) (5 0 4 11 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil) (om-load-inputfun (quote input-funbox) "" "input 5" nil) (om-load-inputfun (quote input-funbox) "" "input 6" nil) (om-load-inputfun (quote input-funbox) "" "input 7" nil) (om-load-inputfun (quote input-funbox) "" "input 8" nil) (om-load-inputfun (quote input-funbox) "" "input 9" nil) (om-load-inputfun (quote input-funbox) "" "input 10" nil) (om-load-inputfun (quote input-funbox) "" "input 11" nil) (om-load-inputfun (quote input-funbox) "" "input 12" nil))) (om-make-point 566 66) nil (list nil) "l" "QRMI-INVARIANT"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 613 41) (om-make-point 174 31) (list 1 2 3 4 5 6 7 8 9 10 11 12) "(1 2 3 4 5 6 7 8 9 10 11 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INDEX-RULE 5" (quote omcs::index-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "list" "INDEX-NUMBERS" (list 1)))) (om-make-point 656 137) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 384 245) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "R-INVARIANT" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 152 247) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "QI-INVARIANT" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INDEX-RULE" (quote omcs::index-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "list" "INDEX-NUMBERS" (list 1)))) (om-make-point 396 129) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 351 33) (om-make-point 174 31) (list 1 2 3 4 5 6 7 8 9 10 11 12) "(1 2 3 4 5 6 7 8 9 10 11 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "R-INVARIANT" (om-load-patch-abs1 "R-INVARIANT" (quote ((let ((box (om-load-boxcall (quote genfun) "R-AIS" (quote om-ais::r-ais) (quote ((om-load-inputfun (quote input-funbox) "AIS" "AIS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 369 204) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 305 341) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 310 270) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 265 160) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 12" 11 (om-make-point 576 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 11" 10 (om-make-point 526 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 10" 9 (om-make-point 476 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 9" 8 (om-make-point 426 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 8" 7 (om-make-point 376 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 7" 6 (om-make-point 326 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 6" 5 (om-make-point 276 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 5" 4 (om-make-point 226 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 4" 3 (om-make-point 176 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 126 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 76 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 26 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (0 0 2 1 nil 0) (15 0 3 0 nil 0) (14 0 3 1 nil 0) (13 0 3 2 nil 0) (12 0 3 3 nil 0) (11 0 3 4 nil 0) (10 0 3 5 nil 0) (9 0 3 6 nil 0) (8 0 3 7 nil 0) (7 0 3 8 nil 0) (6 0 3 9 nil 0) (5 0 3 10 nil 0) (4 0 3 11 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil) (om-load-inputfun (quote input-funbox) "" "input 5" nil) (om-load-inputfun (quote input-funbox) "" "input 6" nil) (om-load-inputfun (quote input-funbox) "" "input 7" nil) (om-load-inputfun (quote input-funbox) "" "input 8" nil) (om-load-inputfun (quote input-funbox) "" "input 9" nil) (om-load-inputfun (quote input-funbox) "" "input 10" nil) (om-load-inputfun (quote input-funbox) "" "input 11" nil) (om-load-inputfun (quote input-funbox) "" "input 12" nil))) (om-make-point 304 58) nil (list nil) "l" "R-INVARIANT"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INDEX-RULE 2" (quote omcs::index-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "list" "INDEX-NUMBERS" (list 1)))) (om-make-point 166 166) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 88 25) (om-make-point 177 26) (list 1 2 3 4 5 6 7 8 9 10 11 12) "(1 2 3 4 5 6 7 8 9 10 11 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "QI-INVARIANT" (om-load-patch-abs1 "QI-INVARIANT" (quote ((let ((box (om-load-boxcall (quote genfun) "I-AIS" (quote om-ais::i-ais) (quote ((om-load-inputfun (quote input-funbox) "AIS" "AIS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 217 199) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-AIS" (quote om-ais::q-ais) (quote ((om-load-inputfun (quote input-funbox) "AIS" "AIS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 403 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 305 341) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 310 270) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 265 160) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 12" 11 (om-make-point 576 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 11" 10 (om-make-point 526 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 10" 9 (om-make-point 476 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 9" 8 (om-make-point 426 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 8" 7 (om-make-point 376 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 7" 6 (om-make-point 326 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 6" 5 (om-make-point 276 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 5" 4 (om-make-point 226 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 4" 3 (om-make-point 176 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 126 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 76 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 26 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (4 0 1 0 nil 0) (3 0 2 0 nil 0) (0 0 3 0 nil 0) (1 0 3 1 nil 0) (16 0 4 0 nil 0) (15 0 4 1 nil 0) (14 0 4 2 nil 0) (13 0 4 3 nil 0) (12 0 4 4 nil 0) (11 0 4 5 nil 0) (10 0 4 6 nil 0) (9 0 4 7 nil 0) (8 0 4 8 nil 0) (7 0 4 9 nil 0) (6 0 4 10 nil 0) (5 0 4 11 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil) (om-load-inputfun (quote input-funbox) "" "input 5" nil) (om-load-inputfun (quote input-funbox) "" "input 6" nil) (om-load-inputfun (quote input-funbox) "" "input 7" nil) (om-load-inputfun (quote input-funbox) "" "input 8" nil) (om-load-inputfun (quote input-funbox) "" "input 9" nil) (om-load-inputfun (quote input-funbox) "" "input 10" nil) (om-load-inputfun (quote input-funbox) "" "input 11" nil) (om-load-inputfun (quote input-funbox) "" "input 12" nil))) (om-make-point 56 49) nil (list nil) "l" "QI-INVARIANT"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0) (6 0 4 0 nil 0) (5 0 6 0 nil 0) (7 0 6 1 nil 0) (11 0 8 0 nil 0) (9 0 11 0 nil 0) (10 0 11 1 nil 0) (14 0 12 0 nil 0) (17 0 13 0 nil 0) (16 0 14 0 nil 0) (15 0 14 1 nil 0) (19 0 17 0 nil 0) (18 0 17 1 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 3329/6 466/3) nil (list (list (quote i1) (quote i2) (quote i3) (quote i4) (quote i5) (quote i6) (quote i7) (quote i8) (quote i9) (quote i10) (quote i11) (quote i12) (list (quote common-lisp-user::?if) (list (quote funcall) nil (quote i1) (quote i2) (quote i3) (quote i4) (quote i5) (quote i6) (quote i7) (quote i8) (quote i9) (quote i10) (quote i11) (quote i12)))) (list (quote i1) (quote i2) (quote i3) (quote i4) (quote i5) (quote i6) (quote i7) (quote i8) (quote i9) (quote i10) (quote i11) (quote i12) (list (quote common-lisp-user::?if) (list (quote funcall) nil (quote i1) (quote i2) (quote i3) (quote i4) (quote i5) (quote i6) (quote i7) (quote i8) (quote i9) (quote i10) (quote i11) (quote i12)))) (list (quote i1) (quote i2) (quote i3) (quote i4) (quote i5) (quote i6) (quote i7) (quote i8) (quote i9) (quote i10) (quote i11) (quote i12) (list (quote common-lisp-user::?if) (list (quote funcall) nil (quote i1) (quote i2) (quote i3) (quote i4) (quote i5) (quote i6) (quote i7) (quote i8) (quote i9) (quote i10) (quote i11) (quote i12)))) (list (quote i1) (quote i2) (quote i3) (quote i4) (quote i5) (quote i6) (quote i7) (quote i8) (quote i9) (quote i10) (quote i11) (quote i12) (list (quote common-lisp-user::?if) (list (quote funcall) nil (quote i1) (quote i2) (quote i3) (quote i4) (quote i5) (quote i6) (quote i7) (quote i8) (quote i9) (quote i10) (quote i11) (quote i12)))) (list (quote i1) (quote i2) (quote i3) (quote i4) (quote i5) (quote i6) (quote i7) (quote i8) (quote i9) (quote i10) (quote i11) (quote i12) (list (quote common-lisp-user::?if) (list (quote funcall) nil (quote i1) (quote i2) (quote i3) (quote i4) (quote i5) (quote i6) (quote i7) (quote i8) (quote i9) (quote i10) (quote i11) (quote i12))))) nil "ADITIONAL-INDEX-RULES"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INDEX-RULE" (quote omcs::index-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "list" "INDEX-NUMBERS" (list 1)))) (om-make-point 421 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 497 102) (om-make-point 48 30) (list 1 2) "(1 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "prime-form-AIS" (om-load-patch-abs1 "prime-form-AIS" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 115 436) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "=" (quote =) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 126 389) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 83 321) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 83 273) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 42 213) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD 2" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 24 243) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "- 2" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 14 177) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 1 134) (om-make-point 24 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 161 80) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 130 115) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "-" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 130 61) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "?2" 1 (om-make-point 99 0) "" "?2" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "?1" 0 (om-make-point 159 0) "" "?1" nil (om-make-point 24 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (9 0 1 1 nil 0) (3 0 2 0 nil 0) (5 0 3 0 nil 0) (9 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (7 0 6 0 nil 0) (9 0 6 1 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (11 0 10 0 nil 0) (12 0 10 1 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "?1" nil) (om-load-inputfun (quote input-funbox) "" "?2" nil))) (om-make-point 396 58) nil (list nil) "l" "prime-form-AIS"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 433 306) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "LINK-CHORDS->P-R-I-RI" (om-load-patch-abs1 "LINK-CHORDS->P-R-I-RI" (quote ((let ((box (om-load-boxcall (quote abstraction) "P-R-I-RI" (om-load-patch-abs1 "P-R-I-RI" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 218 428) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 635/4 681/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 1203/4 549/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 879/4 549/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 559/4 547/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 211/4 545/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RI-AIS" (quote om-ais::ri-ais) (quote ((om-load-inputfun (quote input-funbox) "AIS" "AIS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 1183/4 339/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "I-AIS" (quote om-ais::i-ais) (quote ((om-load-inputfun (quote input-funbox) "AIS" "AIS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 859/4 339/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-AIS" (quote om-ais::r-ais) (quote ((om-load-inputfun (quote input-funbox) "AIS" "AIS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 539/4 339/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (6 0 2 0 nil 0) (5 0 2 1 nil 0) (4 0 2 2 nil 0) (3 0 2 3 nil 0) (7 0 3 0 nil 0) (8 0 4 0 nil 0) (9 0 5 0 nil 0) (1 0 6 0 nil 0) (1 0 7 0 nil 0) (1 0 8 0 nil 0) (1 0 9 0 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 285/8 167/2) nil nil "l" "P-R-I-RI"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 111 575/2) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 129 11/2) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT-ONCE" (quote flat-once) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 107 469/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 113 353/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (4 0 3 0 nil 0) (0 0 4 0 nil 0) (2 0 4 1 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 292 399)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 2649/10 4229/10) nil (list (list (list 0 1 8 5 3 11 10 4 7 9 2 6) (list 0 8 3 1 10 4 5 9 11 2 7 6) (list 0 11 4 7 9 1 2 8 5 3 10 6) (list 0 4 9 11 2 8 7 3 1 10 5 6) (list 0 1 8 5 7 10 4 3 11 9 2 6) (list 0 8 3 5 9 10 4 1 11 2 7 6) (list 0 11 4 7 5 2 8 9 1 3 10 6) (list 0 4 9 7 3 2 8 11 1 10 5 6) (list 0 1 9 4 7 11 10 3 5 2 8 6) (list 0 2 8 11 9 4 5 1 10 3 7 6) (list 0 11 3 8 5 1 2 9 7 10 4 6) (list 0 10 4 1 3 8 7 11 2 9 5 6) (list 0 1 9 7 4 11 10 3 5 8 2 6) (list 0 8 2 11 9 4 5 10 1 3 7 6) (list 0 11 3 5 8 1 2 9 7 4 10 6) (list 0 4 10 1 3 8 7 2 11 9 5 6) (list 0 1 9 11 4 3 7 10 5 2 8 6) (list 0 2 8 11 4 1 9 10 5 3 7 6) (list 0 11 3 1 8 9 5 2 7 10 4 6) (list 0 10 4 1 8 11 3 2 7 9 5 6) (list 0 1 9 11 4 3 10 7 5 8 2 6) (list 0 8 2 11 1 4 9 10 5 3 7 6) (list 0 11 3 1 8 9 2 5 7 4 10 6) (list 0 4 10 1 11 8 3 2 7 9 5 6) (list 0 2 1 9 3 10 7 11 4 5 8 6) (list 0 2 11 10 5 1 4 9 3 7 8 6) (list 0 10 11 3 9 2 5 1 8 7 4 6) (list 0 10 1 2 7 11 8 3 9 5 4 6) (list 0 2 1 9 10 3 7 4 11 5 8 6) (list 0 2 11 5 10 1 9 4 3 7 8 6) (list 0 10 11 3 2 9 5 8 1 7 4 6) (list 0 10 1 7 2 11 3 8 9 5 4 6) (list 0 2 5 10 11 7 4 3 9 1 8 6) (list 0 2 7 3 9 10 1 5 4 11 8 6) (list 0 10 7 2 1 5 8 9 3 11 4 6) (list 0 10 5 9 3 2 11 7 8 1 4 6) (list 0 2 5 11 10 7 3 4 9 1 8 6) (list 0 2 7 3 10 9 1 4 5 11 8 6) (list 0 10 7 1 2 5 9 8 3 11 4 6) (list 0 10 5 9 2 3 11 8 7 1 4 6) (list 0 2 7 3 9 10 1 5 4 11 8 6) (list 0 2 5 10 11 7 4 3 9 1 8 6) (list 0 10 5 9 3 2 11 7 8 1 4 6) (list 0 10 7 2 1 5 8 9 3 11 4 6) (list 0 2 7 3 10 9 1 4 5 11 8 6) (list 0 2 5 11 10 7 3 4 9 1 8 6) (list 0 10 5 9 2 3 11 8 7 1 4 6) (list 0 10 7 1 2 5 9 8 3 11 4 6) (list 0 2 8 1 5 3 4 11 7 10 9 6) (list 0 3 4 1 5 10 9 11 7 2 8 6) (list 0 10 4 11 7 9 8 1 5 2 3 6) (list 0 9 8 11 7 2 3 1 5 10 4 6) (list 0 2 8 1 5 4 7 3 10 11 9 6) (list 0 3 5 4 9 1 10 11 7 2 8 6) (list 0 10 4 11 7 8 5 9 2 1 3 6) (list 0 9 7 8 3 11 2 1 5 10 4 6) (list 0 2 8 5 3 4 11 7 10 9 1 6) (list 0 7 3 4 1 5 10 9 11 2 8 6) (list 0 10 4 7 9 8 1 5 2 3 11 6) (list 0 5 9 8 11 7 2 3 1 10 4 6) (list 0 2 8 5 4 7 3 10 11 9 1 6) (list 0 7 3 5 4 9 1 10 11 2 8 6) (list 0 10 4 7 8 5 9 2 1 3 11 6) (list 0 5 9 7 8 3 11 2 1 10 4 6) (list 0 2 8 7 11 4 1 9 10 5 3 6) (list 0 9 11 4 3 7 10 5 1 2 8 6) (list 0 10 4 5 1 8 11 3 2 7 9 6) (list 0 3 1 8 9 5 2 7 11 10 4 6) (list 0 2 8 7 11 9 4 5 1 10 3 6) (list 0 9 4 7 11 10 3 5 1 2 8 6) (list 0 10 4 5 1 3 8 7 11 2 9 6) (list 0 3 8 5 1 2 9 7 11 10 4 6) (list 0 2 8 11 4 1 9 10 5 3 7 6) (list 0 1 9 11 4 3 7 10 5 2 8 6) (list 0 10 4 1 8 11 3 2 7 9 5 6) (list 0 11 3 1 8 9 5 2 7 10 4 6) (list 0 2 8 11 9 4 5 1 10 3 7 6) (list 0 1 9 4 7 11 10 3 5 2 8 6) (list 0 10 4 1 3 8 7 11 2 9 5 6) (list 0 11 3 8 5 1 2 9 7 10 4 6) (list 0 2 11 5 10 1 9 4 3 7 8 6) (list 0 2 1 9 10 3 7 4 11 5 8 6) (list 0 10 1 7 2 11 3 8 9 5 4 6) (list 0 10 11 3 2 9 5 8 1 7 4 6) (list 0 2 11 10 5 1 4 9 3 7 8 6) (list 0 2 1 9 3 10 7 11 4 5 8 6) (list 0 10 1 2 7 11 8 3 9 5 4 6) (list 0 10 11 3 9 2 5 1 8 7 4 6) (list 0 3 1 2 9 8 5 7 11 4 10 6) (list 0 4 10 5 1 11 2 3 8 7 9 6) (list 0 9 11 10 3 4 7 5 1 8 2 6) (list 0 8 2 7 11 1 10 9 4 5 3 6) (list 0 3 1 8 9 5 2 7 11 10 4 6) (list 0 10 4 5 1 8 11 3 2 7 9 6) (list 0 9 11 4 3 7 10 5 1 2 8 6) (list 0 2 8 7 11 4 1 9 10 5 3 6) (list 0 3 1 10 5 4 9 11 7 8 2 6) (list 0 8 2 1 5 3 10 11 4 7 9 6) (list 0 9 11 2 7 8 3 1 5 4 10 6) (list 0 4 10 11 7 9 2 1 8 5 3 6) (list 0 3 4 1 5 10 9 11 7 2 8 6) (list 0 2 8 1 5 3 4 11 7 10 9 6) (list 0 9 8 11 7 2 3 1 5 10 4 6) (list 0 10 4 11 7 9 8 1 5 2 3 6) (list 0 3 5 2 1 8 9 7 11 4 10 6) (list 0 4 10 5 1 3 2 7 8 11 9 6) (list 0 9 7 10 11 4 3 5 1 8 2 6) (list 0 8 2 7 11 9 10 5 4 1 3 6) (list 0 3 5 4 9 1 10 11 7 2 8 6) (list 0 2 8 1 5 4 7 3 10 11 9 6) (list 0 9 7 8 3 11 2 1 5 10 4 6) (list 0 10 4 11 7 8 5 9 2 1 3 6) (list 0 3 5 10 9 4 1 11 7 8 2 6) (list 0 8 2 1 5 7 10 3 4 11 9 6) (list 0 9 7 2 3 8 11 1 5 4 10 6) (list 0 4 10 11 7 5 2 9 8 1 3 6) (list 0 3 8 5 1 2 9 7 11 10 4 6) (list 0 10 4 5 1 3 8 7 11 2 9 6) (list 0 9 4 7 11 10 3 5 1 2 8 6) (list 0 2 8 7 11 9 4 5 1 10 3 6) (list 0 4 3 1 9 2 8 5 7 10 11 6) (list 0 5 4 1 11 2 8 3 7 9 10 6) (list 0 8 9 11 3 10 4 7 5 2 1 6) (list 0 7 8 11 1 10 4 9 5 3 2 6) (list 0 4 3 5 2 8 1 9 7 10 11 6) (list 0 5 4 1 3 7 2 8 11 9 10 6) (list 0 8 9 7 10 4 11 3 5 2 1 6) (list 0 7 8 11 9 5 10 4 1 3 2 6) (list 0 4 9 7 3 2 8 11 1 10 5 6) (list 0 11 4 7 5 2 8 9 1 3 10 6) (list 0 8 3 5 9 10 4 1 11 2 7 6) (list 0 1 8 5 7 10 4 3 11 9 2 6) (list 0 4 9 11 2 8 7 3 1 10 5 6) (list 0 11 4 7 9 1 2 8 5 3 10 6) (list 0 8 3 1 10 4 5 9 11 2 7 6) (list 0 1 8 5 3 11 10 4 7 9 2 6) (list 0 4 10 1 3 8 7 2 11 9 5 6) (list 0 11 3 5 8 1 2 9 7 4 10 6) (list 0 8 2 11 9 4 5 10 1 3 7 6) (list 0 1 9 7 4 11 10 3 5 8 2 6) (list 0 4 10 1 11 8 3 2 7 9 5 6) (list 0 11 3 1 8 9 2 5 7 4 10 6) (list 0 8 2 11 1 4 9 10 5 3 7 6) (list 0 1 9 11 4 3 10 7 5 8 2 6) (list 0 4 10 5 1 3 2 7 8 11 9 6) (list 0 3 5 2 1 8 9 7 11 4 10 6) (list 0 8 2 7 11 9 10 5 4 1 3 6) (list 0 9 7 10 11 4 3 5 1 8 2 6) (list 0 4 10 5 1 11 2 3 8 7 9 6) (list 0 3 1 2 9 8 5 7 11 4 10 6) (list 0 8 2 7 11 1 10 9 4 5 3 6) (list 0 9 11 10 3 4 7 5 1 8 2 6) (list 0 4 10 7 5 8 9 2 1 3 11 6) (list 0 5 9 7 8 3 2 11 1 4 10 6) (list 0 8 2 5 7 4 3 10 11 9 1 6) (list 0 7 3 5 4 9 10 1 11 8 2 6) (list 0 4 10 7 9 8 1 2 5 3 11 6) (list 0 5 9 11 8 7 2 3 1 4 10 6) (list 0 8 2 5 3 4 11 10 7 9 1 6) (list 0 7 3 1 4 5 10 9 11 8 2 6) (list 0 4 10 11 7 5 2 9 8 1 3 6) (list 0 9 7 2 3 8 11 1 5 4 10 6) (list 0 8 2 1 5 7 10 3 4 11 9 6) (list 0 3 5 10 9 4 1 11 7 8 2 6) (list 0 4 10 11 7 9 2 1 8 5 3 6) (list 0 9 11 2 7 8 3 1 5 4 10 6) (list 0 8 2 1 5 3 10 11 4 7 9 6) (list 0 3 1 10 5 4 9 11 7 8 2 6) (list 0 5 4 1 3 7 2 8 11 9 10 6) (list 0 4 3 5 2 8 1 9 7 10 11 6) (list 0 7 8 11 9 5 10 4 1 3 2 6) (list 0 8 9 7 10 4 11 3 5 2 1 6) (list 0 5 4 1 11 2 8 3 7 9 10 6) (list 0 4 3 1 9 2 8 5 7 10 11 6) (list 0 7 8 11 1 10 4 9 5 3 2 6) (list 0 8 9 11 3 10 4 7 5 2 1 6) (list 0 5 9 7 8 3 2 11 1 4 10 6) (list 0 4 10 7 5 8 9 2 1 3 11 6) (list 0 7 3 5 4 9 10 1 11 8 2 6) (list 0 8 2 5 7 4 3 10 11 9 1 6) (list 0 5 9 7 8 3 11 2 1 10 4 6) (list 0 10 4 7 8 5 9 2 1 3 11 6) (list 0 7 3 5 4 9 1 10 11 2 8 6) (list 0 2 8 5 4 7 3 10 11 9 1 6) (list 0 5 9 8 11 7 2 3 1 10 4 6) (list 0 10 4 7 9 8 1 5 2 3 11 6) (list 0 7 3 4 1 5 10 9 11 2 8 6) (list 0 2 8 5 3 4 11 7 10 9 1 6) (list 0 5 9 11 8 7 2 3 1 4 10 6) (list 0 4 10 7 9 8 1 2 5 3 11 6) (list 0 7 3 1 4 5 10 9 11 8 2 6) (list 0 8 2 5 3 4 11 10 7 9 1 6))) nil "LINK-CHORDS->P-R-I-RI"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((22 0 0 0 nil 0) (3 0 4 0 nil 0) (5 0 4 1 nil 0) (7 0 6 0 nil 0) (4 0 6 1 nil 0) (11 0 6 2 nil 0) (2 0 7 0 nil 0) (15 0 8 0 nil 0) (16 0 9 0 nil 0) (6 0 10 0 nil 0) (13 0 10 1 nil 0) (14 0 10 4 nil 0) (21 0 10 5 nil 0) (12 0 11 0 nil 0) (8 0 13 0 nil 0) (9 0 13 1 nil 0) (18 0 13 2 nil 0) (17 4 13 3 nil 0) (20 0 18 0 nil 0) (19 0 18 1 nil 0) (10 0 22 0 nil 0))) nil 6.17))