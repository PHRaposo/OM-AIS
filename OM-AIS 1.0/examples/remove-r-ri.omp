; OM File Header - Saved 2021/02/11 18:17:19
; (6.17 :patc (om-make-point 163 74) (om-make-point 419 99) (om-make-point 706 540) "" 183 0 "2021/02/10 21:57:23" "2021/02/11 18:17:19")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"remove-r-ri.omp\""))
(in-package :om)(load-lib-for (quote ("OM-AIS")))(setf *om-current-persistent* (om-load-patch1 "remove-r-ri" (quote ((let ((box (om-load-boxin "init-first" 1 (om-make-point 475 7) "" "init-first" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 375 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 274 101) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 296 232) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 156 104) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 103 88) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "remove-if-equal-r-ri" (om-load-patch-abs1 "remove-if-equal-r-ri" (quote ((let ((box (om-load-boxcall (quote genfun) "RI-AIS" (quote om-ais::ri-ais) (quote ((om-load-inputfun (quote input-funbox) "AIS" "AIS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 223 123) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 228 241) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE-IF" (quote remove-if) (quote ((om-load-inputfun (quote input-funbox) "PREDICATE" "PREDICATE" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 220 357) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE-IF 2" (quote remove-if) (quote ((om-load-inputfun (quote input-funbox) "PREDICATE" "PREDICATE" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 143 283) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 2" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 130 234) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-AIS" (quote om-ais::r-ais) (quote ((om-load-inputfun (quote input-funbox) "AIS" "AIS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 125 122) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 226 427) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "CDR" 1 (om-make-point 172 5) "" "CDR" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "FIRST" 0 (om-make-point 3 41) "" "FIRST" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 0) (0 0 1 0 nil 0) (1 0 2 0 nil 0) (3 0 2 1 nil 0) (4 0 3 0 nil 0) (7 0 3 1 nil 0) (5 0 4 0 nil 0) (8 0 5 0 nil 0) (2 0 6 0 nil 0))) 6.17 nil "" (om-make-point 248 91) (om-make-point 547 613)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 411/2 158) nil nil nil "remove-if-equal-r-ri"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "remove-r-ri" (quote ("elements" "remove-r-ri")) (quote ((om-load-inputfun (quote input-funbox) "" "CALCULATIONS" nil) (om-load-inputfun (quote input-funbox) "" "init-first" nil))) (om-make-point 449 304) nil nil nil "remove-r-ri" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 301 510) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 4 418) (om-make-point 642 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 375 106) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "CALCULATIONS" 0 (om-make-point 284 0) "" "CALCULATIONS" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 1 0 nil 0) (11 0 2 0 nil 0) (6 0 3 0 nil 0) (1 0 3 1 nil 0) (11 0 4 0 nil 0) (0 0 5 0 nil 0) (4 0 5 1 nil 0) (10 0 6 0 nil 0) (2 0 6 1 nil 0) (3 0 7 0 nil 0) (0 0 7 1 nil 0) (9 0 8 0 nil 0) (5 0 9 0 nil 0) (3 0 9 1 nil 0) (7 0 9 2 nil 0) (11 0 10 0 nil 0))) nil 6.17))
