
(:patch
 (:name "melodic-contours")
 (:doc "")
 (:info
  (:created "2022/05/03 18:53:16")
  (:modified "2022/05/03 18:56:41")
  (:by "om-sharp")
  (:version 1.03))
 (:window (:size (1163 690)) (:position (42 56)))
 (:grid nil)
 (:lock nil)
 (:boxes
  (:comment
   (:x 179)
   (:y 5)
   (:w 369)
   (:h 143)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 12) (:style :plain)))
   (:align nil)
   (:text
    "The function AIS->MELODIC-CONTOURS returns a list of lists of eleven intervals (combining ascending and descending intervals, with no repetition between them), in midicents, containing all 64 possible melodic contours of the given all intervals series, with intervals no higher than a octave. The optional argument is for selecting only the melodic contours with the given maximun range between the lowest and highest note. It is necessary to use the function DX->X to obtain a list of notes in midicents.")
   (:id 0))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "aux 3")
   (:x 339)
   (:y 153)
   (:w 48)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 6600)
   (:id 1))
  (:box
   (:type :object)
   (:reference chord-seq)
   (:group-id nil)
   (:name "CHORD-SEQ")
   (:x 24)
   (:y 459)
   (:w 610)
   (:h 185)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:showname nil)
   (:show-markers t)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LMIDIC")
     (:value (:list 6000))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LONSET")
     (:value (:list 0 1000))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LDUR")
     (:value (:list 1000))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LVEL")
     (:value (:list 100))
     (:reactive nil))
    (:input
     (:type :key)
     (:name "loffset")
     (:value (:list 0))
     (:reactive nil))
    (:input
     (:type :key)
     (:name "lchan")
     (:value (:list 1))
     (:reactive nil))
    (:input (:type :key) (:name "llegato") (:value 0) (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "LMIDIC") (:reactive nil))
    (:output (:name "LONSET") (:reactive nil))
    (:output (:name "LDUR") (:reactive nil))
    (:output (:name "LVEL") (:reactive nil))
    (:output (:name "loffset") (:reactive nil))
    (:output (:name "lchan") (:reactive nil))
    (:output (:name "llegato") (:reactive nil)))
   (:window (:size nil) (:position nil))
   (:edition-params (:staff :ggff))
   (:value
    (:object
     (:class chord-seq)
     (:slots
      ((:onset 0)
       (:duration 12000)
       (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
       (:name "CHORD-SEQ")
       (:symbolic-date nil)
       (:symbolic-dur nil)
       (:symbolic-dur-extent 0)
       (:extras nil)
       (:group-ids nil)
       (:lmidic
        (:list
         (:list 6000)
         (:list 6100)
         (:list 5100)
         (:list 6200)
         (:list 5500)
         (:list 5800)
         (:list 5600)
         (:list 6400)
         (:list 5900)
         (:list 5300)
         (:list 5700)
         (:list 6600)))
       (:lonset
        (:list
         0
         1000
         2000
         3000
         4000
         5000
         6000
         7000
         8000
         9000
         10000
         11000
         12000))
       (:ldur (:list 1000))
       (:lvel (:list 100))
       (:loffset (:list 0))
       (:lchan (:list 1))
       (:lport (:list nil))
       (:llegato nil)))))
   (:id 2))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "aux 2")
   (:x 112)
   (:y 352)
   (:w 48)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 6000)
   (:id 3))
  (:box
   (:type :function)
   (:reference dx->x)
   (:group-id nil)
   (:name "dx->x")
   (:x 140)
   (:y 393)
   (:w 74)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "START")
     (:value 0)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LIST")
     (:value (:list 1 1))
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 4))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "TEXT-BOX")
   (:x 435)
   (:y 281)
   (:w 55)
   (:h 29)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "in")
     (:value "untitled")
     (:reactive nil)))
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "64")
   (:id 5))
  (:box
   (:type :function)
   (:reference length)
   (:group-id nil)
   (:name "length")
   (:x 427)
   (:y 226)
   (:w 72)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SEQUENCE")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 6))
  (:box
   (:type :object)
   (:reference textbuffer)
   (:group-id nil)
   (:name "text-view")
   (:x 737)
   (:y 13)
   (:w 377)
   (:h 653)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:showname nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "CONTENTS")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :key)
     (:name "output-mode")
     (:value :text)
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "CONTENTS") (:reactive nil))
    (:output (:name "output-mode") (:reactive nil)))
   (:window (:size nil) (:position nil))
   (:edition-params (:output-mode :text))
   (:value
    (:object
     (:class textbuffer)
     (:slots
      ((:contents
        (:list
         "(100 -1000 1100 -700 300 -200 800 -500 -600 400 900)"
         "(100 -1000 1100 500 -900 -200 -400 700 600 -800 -300)"
         "(100 -1000 1100 -700 300 -200 -400 -500 600 -800 900)"
         "(-1100 200 -100 -700 300 1000 -400 -500 600 -800 900)"
         "(100 200 1100 -700 -900 1000 800 -500 -600 400 -300)"
         "(100 -1000 1100 -700 -900 -200 800 -500 600 400 -300)"
         "(-1100 200 -100 500 -900 1000 -400 700 -600 -800 -300)"
         "(-1100 200 -100 500 -900 1000 -400 700 600 -800 -300)"
         "(100 200 1100 -700 300 1000 -400 -500 600 -800 900)"
         "(100 200 1100 -700 -900 1000 -400 -500 600 -800 -300)"
         "(100 -1000 1100 500 300 -200 -400 700 -600 -800 900)"
         "(100 -1000 1100 500 -900 -200 800 700 -600 400 -300)"
         "(100 -1000 1100 -700 -900 -200 800 -500 -600 400 -300)"
         "(-1100 200 -100 500 300 1000 -400 700 -600 -800 900)"
         "(-1100 -1000 -100 500 300 -200 -400 700 600 -800 900)"
         "(100 200 1100 500 -900 1000 -400 700 -600 -800 -300)"
         "(100 200 1100 -700 300 1000 -400 -500 -600 -800 900)"
         "(100 200 1100 -700 -900 1000 800 -500 600 400 -300)"
         "(-1100 200 -100 -700 300 1000 800 -500 -600 400 900)"
         "(100 -1000 1100 500 -900 -200 -400 700 -600 -800 -300)"
         "(-1100 200 -100 500 -900 1000 800 700 -600 400 -300)"
         "(-1100 200 -100 -700 -900 1000 800 -500 -600 400 -300)"
         "(-1100 200 -100 -700 -900 1000 800 -500 600 400 -300)"
         "(100 -1000 1100 500 300 -200 -400 700 600 -800 900)"
         "(100 -1000 1100 -700 300 -200 800 -500 600 400 900)"
         "(-1100 200 -100 -700 300 1000 -400 -500 -600 -800 900)"
         "(-1100 -1000 -100 500 300 -200 -400 700 -600 -800 900)"
         "(-1100 -1000 -100 500 300 -200 800 700 -600 400 900)"
         "(-1100 -1000 -100 500 -900 -200 800 700 -600 400 -300)"
         "(-1100 -1000 -100 500 -900 -200 800 700 600 400 -300)"
         "(100 200 1100 500 -900 1000 -400 700 600 -800 -300)"
         "(100 -1000 1100 -700 300 -200 -400 -500 -600 -800 900)"
         "(-1100 200 -100 500 300 1000 -400 700 600 -800 900)"
         "(-1100 -1000 -100 -700 300 -200 800 -500 600 400 900)"
         "(100 200 1100 -700 300 1000 800 -500 -600 400 900)"
         "(100 -1000 1100 500 -900 -200 800 700 600 400 -300)"
         "(-1100 200 -100 -700 -900 1000 -400 -500 600 -800 -300)"
         "(-1100 -1000 -100 -700 300 -200 800 -500 -600 400 900)"
         "(100 200 1100 -700 -900 1000 -400 -500 -600 -800 -300)"
         "(100 -1000 1100 -700 -900 -200 -400 -500 600 -800 -300)"
         "(-1100 -1000 -100 500 -900 -200 -400 700 600 -800 -300)"
         "(100 200 1100 500 300 1000 -400 700 -600 -800 900)"
         "(100 200 1100 500 -900 1000 800 700 -600 400 -300)"
         "(-1100 200 -100 500 -900 1000 800 700 600 400 -300)"
         "(-1100 200 -100 -700 300 1000 800 -500 600 400 900)"
         "(100 -1000 1100 500 300 -200 800 700 -600 400 900)"
         "(-1100 -1000 -100 -700 300 -200 -400 -500 600 -800 900)"
         "(-1100 -1000 -100 500 300 -200 800 700 600 400 900)"
         "(-1100 -1000 -100 -700 -900 -200 800 -500 600 400 -300)"
         "(-1100 200 -100 500 300 1000 800 700 -600 400 900)"
         "(100 200 1100 500 300 1000 -400 700 600 -800 900)"
         "(100 200 1100 -700 300 1000 800 -500 600 400 900)"
         "(-1100 200 -100 -700 -900 1000 -400 -500 -600 -800 -300)"
         "(-1100 -1000 -100 500 -900 -200 -400 700 -600 -800 -300)"
         "(-1100 -1000 -100 -700 -900 -200 800 -500 -600 400 -300)"
         "(100 -1000 1100 -700 -900 -200 -400 -500 -600 -800 -300)"
         "(100 200 1100 500 -900 1000 800 700 600 400 -300)"
         "(100 -1000 1100 500 300 -200 800 700 600 400 900)"
         "(-1100 -1000 -100 -700 300 -200 -400 -500 -600 -800 900)"
         "(-1100 200 -100 500 300 1000 800 700 600 400 900)"
         "(100 200 1100 500 300 1000 800 700 -600 400 900)"
         "(-1100 -1000 -100 -700 -900 -200 -400 -500 600 -800 -300)"
         "(100 200 1100 500 300 1000 800 700 600 400 900)"
         "(-1100 -1000 -100 -700 -900 -200 -400 -500 -600 -800 -300)"
         ""))))
     (:add-slots ((:input-mode :lines-cols)))))
   (:id 7))
  (:box
   (:type :function)
   (:reference nth)
   (:group-id nil)
   (:name "nth")
   (:x 165)
   (:y 309)
   (:w 56)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "ORIG-N")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "ORIG-LIST")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 8))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "aux")
   (:x 59)
   (:y 41)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 0)
   (:id 9))
  (:box
   (:type :function)
   (:reference nth)
   (:group-id nil)
   (:name "nth")
   (:x 92)
   (:y 87)
   (:w 56)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "ORIG-N")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "ORIG-LIST")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 10))
  (:box
   (:library "OM-AIS")
   (:type :function)
   (:reference (:symbol "PRIME-AIS" "OM-AIS"))
   (:group-id nil)
   (:name "prime-ais")
   (:x 87)
   (:y 1)
   (:w 90)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs)
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 11))
  (:box
   (:library "OM-AIS")
   (:type :function)
   (:reference (:symbol "AIS->MELODIC-CONTOURS" "OM-AIS"))
   (:group-id nil)
   (:name "ais->melodic-contours")
   (:x 224)
   (:y 191)
   (:w 163)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "AIS")
     (:value (:list 0 1 3 2 7 10 8 4 11 5 9 6))
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "max-range")
     (:value 6600)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 12))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 138)
   (:y 260)
   (:w 32)
   (:h 29)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 0)
   (:id 13)))
 (:connections
  (:connection (:from (:box 1 :out 0)) (:to (:box 12 :in 1)))
  (:connection (:from (:box 3 :out 0)) (:to (:box 4 :in 0)))
  (:connection (:from (:box 4 :out 0)) (:to (:box 2 :in 1)))
  (:connection (:from (:box 6 :out 0)) (:to (:box 5 :in 0)))
  (:connection (:from (:box 8 :out 0)) (:to (:box 4 :in 1)))
  (:connection (:from (:box 9 :out 0)) (:to (:box 10 :in 0)))
  (:connection (:from (:box 10 :out 0)) (:to (:box 12 :in 0)))
  (:connection (:from (:box 11 :out 0)) (:to (:box 10 :in 1)))
  (:connection (:from (:box 12 :out 0)) (:to (:box 6 :in 0)))
  (:connection (:from (:box 12 :out 0)) (:to (:box 7 :in 0)))
  (:connection (:from (:box 12 :out 0)) (:to (:box 8 :in 1)))
  (:connection (:from (:box 13 :out 0)) (:to (:box 8 :in 0)))))