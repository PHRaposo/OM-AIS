; OM File Header - Saved 2021/01/16 15:00:40
; (6.17 :patc (om-make-point 283 7) (om-make-point 14 23) (om-make-point 1350 714) "" 183 0 "2021/01/11 11:24:51" "2021/01/16 15:00:40")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-AIS")))(setf *om-current-persistent* (om-load-patch1 "AIS- basics" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX 5" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 826 407) (om-make-point 186 41) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 158 21) "(0 1 5 8 10 3 9 4 2 11 7 6)" :font (om-make-font "Verdana" 11.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 209 28) (quote "INVERSION ->>>>>") "" (om-make-point 871 207) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "I-AIS" (quote om-ais::i-ais) (quote ((om-load-inputfun (quote input-funbox) "AIS" "AIS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 901 325) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 208 37) (quote "<<<- Rotationally normal") "" (om-make-point 715 554) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 403 202) (quote "\"Considering the series as a cycle, with the first note succeeding the last, there are always two 6s and one of each of the other intervals. Thus among the cyclic permutations of an AIS, there is exactly one other form that fits our definition, with eleven distinct intervals. The other cyclic permutations are degenerate, having two 6s and lacking some other interval. A cyclic permutation whose \"outer interval\" is 6 is rotationally normal\".$$Robert Morris and Daniel Starr - The Structure of All-Interval Series") "" (om-make-point 657 10) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 317 119) (quote "\"An all-interval series is a twelve-tone row among whose eleven successive intervals there are no repetitions, where the interval between two successive pitch-classes (PCs) is the mod-12 difference of the second minus the first. The last note of an AIS is always separated from the first by the interval 6 (...)\".$") "" (om-make-point 286 8) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 4" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 882 547) (om-make-point 186 41) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 158 21) "(0 5 7 10 2 3 9 8 4 1 11 6)" :font (om-make-font "Verdana" 11.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-AIS" (quote om-ais::q-ais) (quote ((om-load-inputfun (quote input-funbox) "AIS" "AIS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 723 325) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "intervals-mod12" (om-load-patch-abs1 "intervals-mod12" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 356/3 220) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 187 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 356/3 135) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INT-MOD12" (quote om-ais::int-mod12) (quote ((om-load-inputfun (quote input-funbox) "List of numbers" "AIS" (list 5 4 0 9 7 2 8 1 3 6 10 11)))) (om-make-point 191/3 14) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 265 309)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 582 396) nil nil nil "intervals-mod12"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-VIEW 3" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 541 464) (om-make-point 178 201) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 154 181) "untitled"))) (om-set-dialog-item-text rep "(11 8 9 10 7 6 5 2 3 4 1)
(8 9 10 7 6 5 2 3 4 1 6)
(9 10 7 6 5 2 3 4 1 6 11)
(10 7 6 5 2 3 4 1 6 11 8)
(7 6 5 2 3 4 1 6 11 8 9)
(6 5 2 3 4 1 6 11 8 9 10)
(5 2 3 4 1 6 11 8 9 10 7)
(2 3 4 1 6 11 8 9 10 7 6)
(3 4 1 6 11 8 9 10 7 6 5)
(4 1 6 11 8 9 10 7 6 5 2)
(1 6 11 8 9 10 7 6 5 2 3)
(6 11 8 9 10 7 6 5 2 3 4)
") rep) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-VIEW" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 326 461) (om-make-point 178 201) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 154 181) "untitled"))) (om-set-dialog-item-text rep "(0 11 7 4 2 9 3 8 10 1 5 6)
(11 7 4 2 9 3 8 10 1 5 6 0)
(7 4 2 9 3 8 10 1 5 6 0 11)
(4 2 9 3 8 10 1 5 6 0 11 7)
(2 9 3 8 10 1 5 6 0 11 7 4)
(9 3 8 10 1 5 6 0 11 7 4 2)
(3 8 10 1 5 6 0 11 7 4 2 9)
(8 10 1 5 6 0 11 7 4 2 9 3)
(10 1 5 6 0 11 7 4 2 9 3 8)
(1 5 6 0 11 7 4 2 9 3 8 10)
(5 6 0 11 7 4 2 9 3 8 10 1)
(6 0 11 7 4 2 9 3 8 10 1 5)
") rep) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "all-rotations" (om-load-patch-abs1 "all-rotations" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 104 323) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "AIS" 0 (om-make-point 90 9) "" "AIS" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 104 264) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ROTATE" (quote rotate) (quote ((om-load-inputfun (quote input-funbox) "the list" "LIST" nil) (om-load-inputfun (quote input-funbox) "nth" "NTH" 1))) (om-make-point 24 175) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 216 97) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 193 132) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 162 87) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 154 175) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (7 0 2 1 nil 0) (1 0 3 0 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (1 0 6 0 nil 0) (5 0 7 1 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 309 428)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1138/3 325) nil (list (list (list 0 11 7 4 2 9 3 8 10 1 5 6) (list 11 7 4 2 9 3 8 10 1 5 6 0) (list 7 4 2 9 3 8 10 1 5 6 0 11) (list 4 2 9 3 8 10 1 5 6 0 11 7) (list 2 9 3 8 10 1 5 6 0 11 7 4) (list 9 3 8 10 1 5 6 0 11 7 4 2) (list 3 8 10 1 5 6 0 11 7 4 2 9) (list 8 10 1 5 6 0 11 7 4 2 9 3) (list 10 1 5 6 0 11 7 4 2 9 3 8) (list 1 5 6 0 11 7 4 2 9 3 8 10) (list 5 6 0 11 7 4 2 9 3 8 10 1) (list 6 0 11 7 4 2 9 3 8 10 1 5))) nil "all-rotations"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 107 27) (quote "PRIME FORM") "" (om-make-point 1177 207) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 1126 354) (om-make-point 186 41) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 158 21) "(0 1 5 8 10 3 9 4 2 11 7 6)" :font (om-make-font "Verdana" 11.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AIS->PRIME" (quote om-ais::ais->prime) (quote ((om-load-inputfun (quote input-funbox) "AIS - list of pitch-classes" "AIS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 1187 247) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AIS->NORMAL" (quote om-ais::ais->normal) (quote ((om-load-inputfun (quote input-funbox) "AIS - list of pitch-classes" "AIS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 232 247) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 3" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 6 270) (om-make-point 186 41) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 158 21) "(5 4 0 9 7 2 8 1 3 6 10 11)" :font (om-make-font "Verdana" 11.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC->PC" (quote om-ais::mc->pc) (quote ((om-load-inputfun (quote input-funbox) "List midicents" "MIDICENTS" (list 6500 6400 7200 6900 7900 7400 8000 7300 7500 6600 7000 5900)))) (om-make-point 75 161) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 175 342) (om-make-point 186 41) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 158 21) "(0 11 7 4 2 9 3 8 10 1 5 6)" :font (om-make-font "Verdana" 11.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 123 27) (quote "NORMAL FORM") "" (om-make-point 218 206) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 234 27) (quote "ALBAN BERG's Lyric Suite series.") "" (om-make-point 63 6) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 92 38) (om-make-point 114 102) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500 6400 7200 6900 7900 7400 8000 7300 7500 6600 7000 5900)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 3 (om-make-point 806 303) (om-make-point 400 23) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (15 0 2 0 nil 0) (7 0 6 0 nil 0) (15 0 7 0 nil 0) (11 0 8 0 nil 0) (8 0 9 0 nil 0) (11 0 10 0 nil 0) (15 0 11 0 nil 0) (14 0 13 0 nil 0) (17 0 14 0 nil 0) (17 0 15 0 nil 0) (17 0 16 0 nil 0) (21 1 17 0 nil 0) (15 0 18 0 nil 0))) nil 6.17))