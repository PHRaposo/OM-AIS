; OM File Header - Saved 2022/05/03 18:55:21
; (7.0 :patc (om-make-point 719 286) (om-make-point 50 50) (om-make-point 1129 690) "" 183 0 "2022/05/03 18:35:28" "2022/05/03 18:55:21")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-AIS")))(setf *om-current-persistent* (om-load-patch1 "melodic-contours" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 369 160) (quote "The function AIS->MELODIC-CONTOURS returns a list of lists of eleven intervals (combining ascending and descending intervals, with no repetition between them), in midicents, containing all 64 possible melodic contours of the given all intervals series, with intervals no higher than a octave. The optional argument is for selecting only the melodic contours with the given maximun range between the lowest and highest note. It is necessary to use the function DX->X to obtain a list of notes in midicents.") "" (om-make-point 179 5) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 236 176) (om-make-point 48 30) 6600 "6600" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 24 459) (om-make-point 610 185) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6100) (5100) (6200) (5500) (5800) (5600) (6400) (5900) (5300) (5700) (6600))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.0 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :microplayer) 1 nil 1000 0 (om-make-point 661 321) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 112 352) (om-make-point 48 30) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 148 393) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 252 309) (om-make-point 55 42) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 27 22) "64" :font (om-make-font "Verdana" 11.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 260 260) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-VIEW" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 737 13) (om-make-point 377 653) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 353 633) "untitled"))) (om-set-dialog-item-text rep "(100 -1000 1100 -700 300 -200 800 -500 -600 400 900)
(100 -1000 1100 500 -900 -200 -400 700 600 -800 -300)
(100 -1000 1100 -700 300 -200 -400 -500 600 -800 900)
(-1100 200 -100 -700 300 1000 -400 -500 600 -800 900)
(100 200 1100 -700 -900 1000 800 -500 -600 400 -300)
(100 -1000 1100 -700 -900 -200 800 -500 600 400 -300)
(-1100 200 -100 500 -900 1000 -400 700 -600 -800 -300)
(-1100 200 -100 500 -900 1000 -400 700 600 -800 -300)
(100 200 1100 -700 300 1000 -400 -500 600 -800 900)
(100 200 1100 -700 -900 1000 -400 -500 600 -800 -300)
(100 -1000 1100 500 300 -200 -400 700 -600 -800 900)
(100 -1000 1100 500 -900 -200 800 700 -600 400 -300)
(100 -1000 1100 -700 -900 -200 800 -500 -600 400 -300)
(-1100 200 -100 500 300 1000 -400 700 -600 -800 900)
(-1100 -1000 -100 500 300 -200 -400 700 600 -800 900)
(100 200 1100 500 -900 1000 -400 700 -600 -800 -300)
(100 200 1100 -700 300 1000 -400 -500 -600 -800 900)
(100 200 1100 -700 -900 1000 800 -500 600 400 -300)
(-1100 200 -100 -700 300 1000 800 -500 -600 400 900)
(100 -1000 1100 500 -900 -200 -400 700 -600 -800 -300)
(-1100 200 -100 500 -900 1000 800 700 -600 400 -300)
(-1100 200 -100 -700 -900 1000 800 -500 -600 400 -300)
(-1100 200 -100 -700 -900 1000 800 -500 600 400 -300)
(100 -1000 1100 500 300 -200 -400 700 600 -800 900)
(100 -1000 1100 -700 300 -200 800 -500 600 400 900)
(-1100 200 -100 -700 300 1000 -400 -500 -600 -800 900)
(-1100 -1000 -100 500 300 -200 -400 700 -600 -800 900)
(-1100 -1000 -100 500 300 -200 800 700 -600 400 900)
(-1100 -1000 -100 500 -900 -200 800 700 -600 400 -300)
(-1100 -1000 -100 500 -900 -200 800 700 600 400 -300)
(100 200 1100 500 -900 1000 -400 700 600 -800 -300)
(100 -1000 1100 -700 300 -200 -400 -500 -600 -800 900)
(-1100 200 -100 500 300 1000 -400 700 600 -800 900)
(-1100 -1000 -100 -700 300 -200 800 -500 600 400 900)
(100 200 1100 -700 300 1000 800 -500 -600 400 900)
(100 -1000 1100 500 -900 -200 800 700 600 400 -300)
(-1100 200 -100 -700 -900 1000 -400 -500 600 -800 -300)
(-1100 -1000 -100 -700 300 -200 800 -500 -600 400 900)
(100 200 1100 -700 -900 1000 -400 -500 -600 -800 -300)
(100 -1000 1100 -700 -900 -200 -400 -500 600 -800 -300)
(-1100 -1000 -100 500 -900 -200 -400 700 600 -800 -300)
(100 200 1100 500 300 1000 -400 700 -600 -800 900)
(100 200 1100 500 -900 1000 800 700 -600 400 -300)
(-1100 200 -100 500 -900 1000 800 700 600 400 -300)
(-1100 200 -100 -700 300 1000 800 -500 600 400 900)
(100 -1000 1100 500 300 -200 800 700 -600 400 900)
(-1100 -1000 -100 -700 300 -200 -400 -500 600 -800 900)
(-1100 -1000 -100 500 300 -200 800 700 600 400 900)
(-1100 -1000 -100 -700 -900 -200 800 -500 600 400 -300)
(-1100 200 -100 500 300 1000 800 700 -600 400 900)
(100 200 1100 500 300 1000 -400 700 600 -800 900)
(100 200 1100 -700 300 1000 800 -500 600 400 900)
(-1100 200 -100 -700 -900 1000 -400 -500 -600 -800 -300)
(-1100 -1000 -100 500 -900 -200 -400 700 -600 -800 -300)
(-1100 -1000 -100 -700 -900 -200 800 -500 -600 400 -300)
(100 -1000 1100 -700 -900 -200 -400 -500 -600 -800 -300)
(100 200 1100 500 -900 1000 800 700 600 400 -300)
(100 -1000 1100 500 300 -200 800 700 600 400 900)
(-1100 -1000 -100 -700 300 -200 -400 -500 -600 -800 900)
(-1100 200 -100 500 300 1000 800 700 600 400 900)
(100 200 1100 500 300 1000 800 700 -600 400 900)
(-1100 -1000 -100 -700 -900 -200 -400 -500 600 -800 -300)
(100 200 1100 500 300 1000 800 700 600 400 900)
(-1100 -1000 -100 -700 -900 -200 -400 -500 -600 -800 -300)
") rep) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POP-UP-MENU" (quote pop-up-menu) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "yes" "no")) (om-load-inputfun (quote input-funbox) "a function or box in lambda mode" "action" nil))) (om-make-point 11 256) (om-make-point 130 44) (let ((rep (om-make-dialog-item (quote pop-up-menu) (om-make-point 1 1) (om-make-point 110 26) "untitled" :range (quote (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63))))) (om-set-selected-item-index rep (quote 0)) rep) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 2" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 165 309) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 59 41) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 92 87) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PRIME-AIS" (quote om-ais::prime-ais) (quote nil) (om-make-point 99 4) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AIS->MELODIC-CONTOURS" (quote om-ais::ais->melodic-contours) (quote ((om-load-inputfun (quote input-funbox) "AIS" "AIS" (list 0 1 3 2 7 10 8 4 11 5 9 6)) (om-load-inputfun (quote input-funbox) "AIS" "MAX-RANGE" 6600))) (om-make-point 119 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 2 1 nil 0) (3 0 4 0 nil 0) (9 0 4 1 nil 0) (6 0 5 0 nil 0) (13 0 6 0 nil 0) (13 0 7 0 nil 0) (8 0 9 0 nil 0) (13 0 9 1 nil 0) (10 0 11 0 nil 0) (12 0 11 1 nil 0) (11 0 13 0 nil 0) (1 0 13 1 nil 0))) nil 7.0))