; OM File Header - Saved 2021/05/01 14:39:39
; (6.18 :patc (om-make-point 917 154) (om-make-point 50 50) (om-make-point 1104 579) "" 183 0 "2021/05/01 14:05:52" "2021/05/01 14:39:39")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCS" "OM-AIS")))(setf *om-current-persistent* (om-load-patch1 "prime-qrmi-invariant" (quote ((let ((box (om-load-boxcall (quote genfun) "PRIME-QRMI-INVARIANT" (quote om-ais::prime-qrmi-invariant) (quote nil) (om-make-point 895 60) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INDEX-RULE 2" (quote omcs::index-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "list" "INDEX-NUMBERS" (list 1)))) (om-make-point 738 177) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 695 81) (om-make-point 174 31) (list 1 2 3 4 5 6 7 8 9 10 11 12) "(1 2 3 4 5 6 7 8 9 10 11 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "QRMI-INVARIANT" (om-load-patch-abs1 "QRMI-INVARIANT" (quote ((let ((box (om-load-boxcall (quote genfun) "IM-AIS" (quote om-ais::im-ais) (quote ((om-load-inputfun (quote input-funbox) "AIS" "AIS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 382 286) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "QR-AIS" (quote om-ais::qr-ais) (quote ((om-load-inputfun (quote input-funbox) "AIS" "AIS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 385 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 305 418) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 310 364) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 265 160) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 12" 11 (om-make-point 576 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 11" 10 (om-make-point 526 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 10" 9 (om-make-point 476 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 9" 8 (om-make-point 426 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 8" 7 (om-make-point 376 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 7" 6 (om-make-point 326 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 6" 5 (om-make-point 276 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 5" 4 (om-make-point 226 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 4" 3 (om-make-point 176 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 126 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 76 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 26 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (4 0 1 0 nil 0) (3 0 2 0 nil 0) (4 0 3 0 nil 0) (0 0 3 1 nil 0) (16 0 4 0 nil 0) (15 0 4 1 nil 0) (14 0 4 2 nil 0) (13 0 4 3 nil 0) (12 0 4 4 nil 0) (11 0 4 5 nil 0) (10 0 4 6 nil 0) (9 0 4 7 nil 0) (8 0 4 8 nil 0) (7 0 4 9 nil 0) (6 0 4 10 nil 0) (5 0 4 11 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil) (om-load-inputfun (quote input-funbox) "" "input 5" nil) (om-load-inputfun (quote input-funbox) "" "input 6" nil) (om-load-inputfun (quote input-funbox) "" "input 7" nil) (om-load-inputfun (quote input-funbox) "" "input 8" nil) (om-load-inputfun (quote input-funbox) "" "input 9" nil) (om-load-inputfun (quote input-funbox) "" "input 10" nil) (om-load-inputfun (quote input-funbox) "" "input 11" nil) (om-load-inputfun (quote input-funbox) "" "input 12" nil))) (om-make-point 648 106) nil (list nil) "l" "QRMI-INVARIANT"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 542 318) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TIME" (quote time) (quote ((om-load-inputfun (quote input-funbox) "FORM" "FORM" nil))) (om-make-point 937 215) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH 3" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 932 156) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 167 42) (quote "Number of possible permutations.") "" (om-make-point 26 243) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "prime-form-AIS" (om-load-patch-abs1 "prime-form-AIS" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 115 436) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "=" (quote =) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 126 389) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 83 321) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 83 273) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 42 213) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD 2" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 24 243) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "- 2" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 14 177) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 1 134) (om-make-point 24 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 161 80) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 130 115) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "-" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 130 61) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "?2" 1 (om-make-point 99 0) "" "?2" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "?1" 0 (om-make-point 159 0) "" "?1" nil (om-make-point 24 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (9 0 1 1 nil 0) (3 0 2 0 nil 0) (5 0 3 0 nil 0) (9 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (7 0 6 0 nil 0) (9 0 6 1 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (11 0 10 0 nil 0) (12 0 10 1 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "?1" nil) (om-load-inputfun (quote input-funbox) "" "?2" nil))) (om-make-point 506 77) nil (list nil) "l" "prime-form-AIS"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 607 121) (om-make-point 48 30) (list 1 2) "(1 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INDEX-RULE" (quote omcs::index-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "list" "INDEX-NUMBERS" (list 1)))) (om-make-point 531 161) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 240 61) (quote "PRIME FORM QRMI-INVARIANT$ALL INTERVAL SERIES") "" (om-make-point 840 5) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 424 420) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-VIEW 2" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 398 479) (om-make-point 93 43) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 69 23) "untitled"))) (om-set-dialog-item-text rep "60") rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 300 83) (quote "Based on the Patch from PWGL$(For more information, see PWGL Book, p.142,  by Mikael Laurson and Mika Kuuskankare, and PWConstraints, by Mikael Laurson.)") "" (om-make-point 64 0) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "no-dup-intervals 3" (om-load-patch-abs1 "no-dup-intervals" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 107 156) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 67 96) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "<=" (quote <=) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 78 199) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 21 442) (om-make-point 274 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 147 402) (om-make-point 24 30) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 198 97) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 127 98) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MEMBER" (quote member) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 202 328) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NOT" (quote not) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 214 381) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 266 279) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 252 144) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD 2" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 245 181) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 257 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 291 96) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 206 171) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 176 212) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 164 163) (om-make-point 24 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REV-PARTIAL-SOLUTION" (quote omcs::rev-partial-solution) (quote nil) (om-make-point 126 0) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 134 514) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((17 0 1 0 nil 0) (1 0 2 0 nil 0) (0 0 2 1 nil 0) (2 0 3 0 nil 0) (4 0 3 1 nil 0) (8 0 3 2 nil 0) (17 0 5 0 nil 0) (17 0 6 0 nil 0) (15 0 7 0 nil 0) (9 0 7 1 nil 0) (7 0 8 0 nil 0) (12 0 9 0 nil 0) (10 0 11 1 nil 0) (11 0 12 0 nil 0) (13 0 12 1 nil 0) (17 0 13 0 nil 0) (16 0 15 0 nil 0) (14 0 15 1 nil 0) (6 0 16 0 nil 0) (5 0 16 1 nil 0) (3 0 18 0 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 407 70) nil (list nil) "l" "no-dup-intervals"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-VIEW" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 57 195) (om-make-point 93 43) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 69 23) "untitled"))) (om-set-dialog-item-text rep "3628800") rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 90 114) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FACTORIAL" (quote factorial) (quote ((om-load-inputfun (quote input-funbox) "N" "N" nil))) (om-make-point 79 148) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "no-dup-notes 2" (om-load-patch-abs1 "no-dup-notes" (quote ((let ((box (om-load-boxcall (quote lispfun) "NOT 2" (quote not) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 154 209) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MEMBER" (quote member) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 142 140) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 72 7) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 192 82) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REV-PARTIAL-SOLUTION" (quote omcs::rev-partial-solution) (quote nil) (om-make-point 195 3) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 143 279) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 1 1 nil 0) (4 0 3 0 nil 0) (0 0 5 0 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 328 70) nil (list nil) "l" "no-dup-notes"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 484 314) (om-make-point 38 30) (quote :all) ":all" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 6" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 335 273) (om-make-point 93 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 281 150) (om-make-point 37 30) (list 6) "(6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 284 191) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PMC-ENGINE" (quote omcs::pmc-engine) (quote ((om-load-inputfun (quote input-funbox) "s-space" "S-SPACE" nil) (om-load-inputfun (quote input-funbox) "rules" "RULES" nil) (om-load-inputfun (quote input-funbox) "heuristic-rules" "HEURISTIC-RULES" nil) (om-load-inputfun (quote input-funbox) "fwc-rules" "FWC-RULES" nil) (om-load-inputfun (quote input-funbox) "sols-mode" "SOLS-MODE" (quote :all)) (om-load-inputfun (quote input-funbox) "random?" "RND?" nil) (om-load-inputfun (quote input-funbox) "print-indexnr?" "PRINT-FL" nil))) (om-make-point 259 349) (om-make-point 378 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WILDCARD-RULE 2" (quote omcs::wildcard-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil))) (om-make-point 433 151) (om-make-point 44 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WILDCARD-RULE" (quote omcs::wildcard-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil))) (om-make-point 337 147) (om-make-point 60 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 181 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 216 248) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 263 105) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 220 145) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 166 72) (om-make-point 149 30) (list 11 10 9 8 7 5 4 3 2 1) "(11 10 9 8 7 5 4 3 2 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 178 148) (om-make-point 37 30) (list 0) "(0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (2 0 1 1 nil 0) (6 0 5 0 nil 0) (0 0 6 0 nil 0) (8 0 10 0 nil 0) (9 0 10 1 nil 0) (24 0 12 0 nil 0) (12 0 13 0 nil 0) (18 0 16 0 nil 0) (17 0 18 0 nil 0) (26 0 21 0 nil 0) (25 0 21 1 nil 0) (10 0 21 2 nil 0) (1 0 21 3 nil 0) (22 0 23 0 nil 0) (28 0 24 0 nil 0) (21 0 24 1 nil 0) (20 0 24 4 nil 0) (4 0 24 5 nil 0) (15 0 25 0 nil 0) (19 0 26 0 nil 0) (32 0 27 0 nil 0) (27 0 28 0 nil 0) (30 0 28 1 nil 0) (23 0 28 2 nil 0) (31 0 30 0 nil 0) (29 0 30 1 nil 0))) nil 6.18))
