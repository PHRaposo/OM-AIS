; OM File Header - Saved 2021/05/01 14:53:26
; (6.18 :patc (om-make-point 722 165) (om-make-point 50 50) (om-make-point 1172 582) "" 183 0 "2021/05/01 14:18:09" "2021/05/01 14:53:26")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCS" "OM-AIS")))(setf *om-current-persistent* (om-load-patch1 "link-chords" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 221 33) (quote "JOHN LINK'S ORIGINAL LISTS") "" (om-make-point 781 342) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 749 427) (om-make-point 116 30) "link-original-ais" "\"link-original-ais\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "READ-TEXT-FILE 2" (quote om-ais::read-text-file) (quote ((om-load-inputfun (quote input-funbox) "STRING" "STRING" nil))) (om-make-point 765 471) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 108 25) (quote "11 INTERVALS$") "" (om-make-point 901 385) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 53 27) (quote "AIS$") "" (om-make-point 783 385) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 906 422) (om-make-point 85 30) "link-original" "\"link-original\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "READ-TEXT-FILE" (quote om-ais::read-text-file) (quote ((om-load-inputfun (quote input-funbox) "STRING" "STRING" nil))) (om-make-point 906 467) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "remove-R-RI" (om-load-patch-abs1 "remove-R-RI" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 95 239) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 91 2) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 148 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE-R-RI" (quote om-ais::remove-r-ri) (quote ((om-load-inputfun (quote input-funbox) "AIS-LIST" "AIS-LIST" nil) (om-load-inputfun (quote input-funbox) "INIT-FIRST" "INIT-FIRST" nil))) (om-make-point 83 149) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 2 0 nil 0) (1 0 3 0 nil 0) (2 0 3 1 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 236 345)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 514 847/2) nil (list (list (list 0 1 3 8 2 5 9 7 4 11 10 6) (list 0 1 4 8 7 2 10 3 5 11 9 6) (list 0 1 4 8 7 2 11 9 3 5 10 6) (list 0 1 4 10 5 3 11 8 7 9 2 6) (list 0 1 4 11 10 3 7 9 5 2 8 6) (list 0 1 4 11 10 7 3 5 9 2 8 6) (list 0 1 5 2 4 11 7 10 3 9 8 6) (list 0 1 5 2 4 11 7 10 9 3 8 6) (list 0 1 5 2 8 7 10 3 11 9 4 6) (list 0 1 5 2 8 10 3 11 9 4 7 6) (list 0 1 5 2 9 7 3 8 11 10 4 6) (list 0 1 5 2 9 11 7 10 4 3 8 6) (list 0 1 5 2 9 11 10 4 7 3 8 6) (list 0 1 5 4 7 2 11 9 3 8 10 6) (list 0 1 5 4 10 8 3 11 2 7 9 6) (list 0 1 5 7 4 10 3 11 2 9 8 6) (list 0 1 5 7 4 11 2 10 3 9 8 6) (list 0 1 5 7 4 11 2 10 9 3 8 6) (list 0 1 5 7 4 11 9 8 2 10 3 6) (list 0 1 5 10 4 2 9 11 8 7 3 6) (list 0 1 5 10 4 2 11 7 9 8 3 6) (list 0 1 5 10 4 7 3 2 9 11 8 6) (list 0 1 5 10 7 3 2 8 11 9 4 6) (list 0 1 5 10 7 9 4 3 11 2 8 6) (list 0 1 5 11 7 4 2 9 8 10 3 6) (list 0 1 5 11 8 7 9 4 2 10 3 6) (list 0 1 8 2 5 3 7 4 9 11 10 6) (list 0 1 8 2 10 3 5 4 7 11 9 6) (list 0 1 8 5 3 9 2 4 7 11 10 6) (list 0 1 8 5 3 11 10 4 7 9 2 6) (list 0 1 8 5 7 10 4 3 11 9 2 6) (list 0 1 8 5 7 10 9 3 11 4 2 6) (list 0 1 8 5 7 11 4 2 10 9 3 6) (list 0 1 8 5 7 11 9 2 10 4 3 6) (list 0 1 8 10 9 3 11 4 7 5 2 6) (list 0 1 8 11 4 10 9 7 3 5 2 6) (list 0 1 8 11 7 5 10 2 4 3 9 6) (list 0 1 8 11 10 4 9 7 3 5 2 6) (list 0 1 9 2 4 3 7 10 5 11 8 6) (list 0 1 9 2 4 3 10 7 11 5 8 6) (list 0 1 9 2 8 10 7 5 4 11 3 6) (list 0 1 9 2 8 11 3 10 7 5 4 6) (list 0 1 9 2 8 11 10 5 3 7 4 6) (list 0 1 9 4 3 5 10 7 11 2 8 6) (list 0 1 9 4 7 11 10 3 5 2 8 6) (list 0 1 9 7 4 11 10 3 5 8 2 6) (list 0 1 9 7 10 3 5 4 11 8 2 6) (list 0 1 9 7 11 8 3 2 5 10 4 6) (list 0 1 9 8 2 5 3 10 7 11 4 6) (list 0 1 9 11 4 3 7 10 5 2 8 6) (list 0 1 9 11 4 3 10 7 5 8 2 6) (list 0 1 10 2 9 3 8 11 7 5 4 6) (list 0 1 10 2 9 7 3 8 11 5 4 6) (list 0 1 10 3 7 2 8 11 9 5 4 6) (list 0 1 10 5 3 11 4 7 9 8 2 6) (list 0 1 10 5 9 7 3 2 8 11 4 6) (list 0 1 10 5 9 11 4 2 8 7 3 6) (list 0 1 10 5 9 11 4 7 3 2 8 6) (list 0 1 11 4 3 10 7 9 5 8 2 6) (list 0 1 11 5 4 7 3 8 10 2 9 6) (list 0 1 11 5 8 7 3 10 2 4 9 6) (list 0 1 11 7 10 3 5 4 8 2 9 6) (list 0 1 11 8 3 7 9 2 5 4 10 6) (list 0 2 1 4 11 5 9 10 7 3 8 6) (list 0 2 1 5 8 9 7 4 10 3 11 6) (list 0 2 1 5 11 4 7 3 10 8 9 6) (list 0 2 1 7 10 5 3 11 4 8 9 6) (list 0 2 1 8 4 7 5 10 11 3 9 6) (list 0 2 1 8 5 11 3 4 9 7 10 6) (list 0 2 1 9 3 10 7 11 4 5 8 6) (list 0 2 1 9 7 8 5 10 4 11 3 6) (list 0 2 1 9 10 3 7 4 11 5 8 6) (list 0 2 1 10 4 9 5 3 7 8 11 6) (list 0 2 1 10 11 5 9 4 7 3 8 6) (list 0 2 3 1 9 8 5 10 4 7 11 6) (list 0 2 3 1 10 4 9 5 8 7 11 6) (list 0 2 3 7 4 9 5 11 10 1 8 6) (list 0 2 3 7 4 11 5 10 1 9 8 6) (list 0 2 3 7 10 4 11 9 8 5 1 6) (list 0 2 3 7 10 5 11 4 1 9 8 6) (list 0 2 3 7 10 9 5 11 4 1 8 6) (list 0 2 3 9 4 7 11 10 8 5 1 6) (list 0 2 3 9 4 8 11 10 7 5 1 6) (list 0 2 3 10 4 7 11 9 8 5 1 6) (list 0 2 5 3 8 9 1 7 4 11 10 6) (list 0 2 5 9 7 8 1 10 4 3 11 6) (list 0 2 5 10 11 7 4 3 9 1 8 6) (list 0 2 5 11 7 4 3 10 8 9 1 6) (list 0 2 5 11 10 7 3 4 9 1 8 6) (list 0 2 7 1 10 9 5 3 4 8 11 6) (list 0 2 7 1 10 11 9 5 4 8 3 6) (list 0 2 7 3 1 8 11 10 4 5 9 6) (list 0 2 7 3 1 10 4 5 9 8 11 6) (list 0 2 7 5 1 10 9 3 4 8 11 6) (list 0 2 7 5 8 9 1 10 4 3 11 6) (list 0 2 7 8 4 1 11 10 5 9 3 6) (list 0 2 7 8 11 5 9 4 3 1 10 6) (list 0 2 7 11 5 4 1 9 10 8 3 6) (list 0 2 8 1 4 3 10 11 7 5 9 6) (list 0 2 8 1 5 3 4 11 7 10 9 6) (list 0 2 8 1 5 4 7 3 10 11 9 6) (list 0 2 8 1 5 4 11 9 10 7 3 6) (list 0 2 8 1 9 10 7 5 4 11 3 6) (list 0 2 8 1 10 9 5 3 4 7 11 6) (list 0 2 8 3 7 10 11 9 5 4 1 6) (list 0 2 8 5 3 4 11 7 10 9 1 6) (list 0 2 8 5 4 7 3 10 11 9 1 6) (list 0 2 8 5 9 7 3 4 11 10 1 6) (list 0 2 8 7 3 10 1 11 4 5 9 6) (list 0 2 8 7 4 9 10 1 5 3 11 6) (list 0 2 8 7 4 9 10 5 1 11 3 6) (list 0 2 8 7 11 4 1 9 10 5 3 6) (list 0 2 8 7 11 4 5 3 10 1 9 6) (list 0 2 8 7 11 9 4 5 1 10 3 6) (list 0 2 8 9 5 3 7 4 11 10 1 6) (list 0 2 8 11 3 10 9 7 4 5 1 6) (list 0 2 8 11 7 4 5 3 10 9 1 6) (list 0 2 9 1 4 5 11 10 7 3 8 6) (list 0 2 9 1 10 11 5 4 7 3 8 6) (list 0 2 9 3 4 7 11 10 8 5 1 6) (list 0 2 9 3 4 8 11 10 7 5 1 6) (list 0 2 9 8 11 3 4 10 7 5 1 6) (list 0 2 11 5 4 7 3 10 8 9 1 6) (list 0 2 11 9 8 3 7 1 4 5 10 6) (list 0 2 11 9 8 3 7 10 4 5 1 6) (list 0 3 1 2 9 8 5 7 11 4 10 6) (list 0 3 1 5 2 7 9 8 4 10 11 6) (list 0 3 1 7 8 5 9 2 4 11 10 6) (list 0 3 1 7 9 8 4 5 10 2 11 6) (list 0 3 1 10 5 4 9 11 7 8 2 6) (list 0 3 2 4 8 9 5 10 7 1 11 6) (list 0 3 2 9 7 11 8 10 4 5 1 6) (list 0 3 4 1 8 2 7 5 9 11 10 6) (list 0 3 4 1 9 11 5 10 8 7 2 6) (list 0 3 4 2 7 1 8 5 9 11 10 6) (list 0 3 4 2 7 9 1 8 5 11 10 6) (list 0 3 4 2 9 8 10 7 11 5 1 6) (list 0 3 4 8 1 7 5 2 9 11 10 6) (list 0 3 4 8 2 9 11 10 7 5 1 6) (list 0 3 4 8 10 9 5 2 7 1 11 6) (list 0 3 4 8 10 9 7 2 11 5 1 6) (list 0 3 4 9 5 11 1 10 8 7 2 6) (list 0 3 4 9 11 5 1 10 8 7 2 6) (list 0 3 4 9 11 10 7 5 1 8 2 6) (list 0 3 4 10 2 7 9 8 5 1 11 6) (list 0 3 4 11 10 8 1 7 9 5 2 6) (list 0 3 4 11 10 8 5 1 7 9 2 6) (list 0 3 4 11 10 8 5 7 1 9 2 6) (list 0 3 5 2 1 8 9 7 11 4 10 6) (list 0 3 5 4 1 9 10 8 2 7 11 6) (list 0 3 5 10 9 4 1 11 7 8 2 6) (list 0 3 5 11 4 1 9 10 8 7 2 6) (list 0 3 7 2 8 10 11 9 5 4 1 6) (list 0 3 7 2 11 9 8 10 4 5 1 6) (list 0 3 7 5 2 1 8 9 11 4 10 6) (list 0 3 8 4 5 11 1 10 9 7 2 6) (list 0 3 8 5 4 10 11 1 9 7 2 6) (list 0 3 8 5 9 7 1 2 4 11 10 6) (list 0 3 8 7 2 4 1 5 11 9 10 6) (list 0 3 8 7 2 4 1 11 5 9 10 6) (list 0 3 8 7 2 4 5 11 9 1 10 6) (list 0 3 8 9 1 7 5 2 4 11 10 6) (list 0 3 8 9 7 1 5 2 4 11 10 6) (list 0 3 8 9 7 2 11 1 5 4 10 6) (list 0 3 8 10 11 5 4 1 9 7 2 6) (list 0 3 8 10 11 9 5 4 1 7 2 6) (list 0 3 9 2 4 8 7 5 1 10 11 6) (list 0 3 9 4 8 10 11 7 5 2 1 6) (list 0 3 9 7 8 1 5 2 4 11 10 6) (list 0 3 9 11 4 5 1 10 8 7 2 6) (list 0 3 10 4 8 9 11 7 5 2 1 6) (list 0 3 11 1 10 5 4 9 7 8 2 6) (list 0 3 11 10 5 7 4 2 8 9 1 6) (list 0 4 1 3 2 9 7 8 11 5 10 6) (list 0 4 2 1 9 3 8 5 7 10 11 6) (list 0 4 2 3 9 11 8 7 10 5 1 6) (list 0 4 3 1 9 2 8 5 7 10 11 6) (list 0 4 3 5 2 8 1 9 7 10 11 6) (list 0 4 3 5 10 1 9 7 8 2 11 6) (list 0 4 5 3 9 11 8 7 2 10 1 6) (list 0 4 5 11 2 7 9 8 3 1 10 6) (list 0 4 7 5 2 1 9 3 8 10 11 6) (list 0 4 7 9 5 3 2 8 1 10 11 6) (list 0 4 7 9 5 3 8 2 1 10 11 6) (list 0 4 10 1 2 7 9 8 5 3 11 6) (list 0 4 10 3 5 2 1 9 7 8 11 6) (list 0 4 10 5 8 9 7 3 2 11 1 6) (list 0 4 10 7 3 5 8 9 2 1 11 6) (list 0 4 10 7 5 8 9 2 1 3 11 6) (list 0 4 10 7 9 8 1 2 5 3 11 6) (list 0 4 11 7 10 8 9 3 5 2 1 6) (list 0 4 11 9 10 7 3 5 8 2 1 6) (list 0 4 11 10 7 9 5 8 2 3 1 6) (list 0 5 1 10 4 2 3 7 9 8 11 6))) nil "remove-R-RI"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LINK-CHORDS" (quote om-ais::link-chords) (quote nil) (om-make-point 900 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 695 35) (om-make-point 177 30) (list 1 2 3 4 5 6 7 8 9 10 11 12) "(1 2 3 4 5 6 7 8 9 10 11 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INDEX-RULE 2" (quote omcs::index-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "list" "INDEX-NUMBERS" (list 1)))) (om-make-point 726 191) (om-make-point 64 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "LINK-CHORDS" (om-load-patch-abs1 "LINK-CHORDS" (quote ((let ((box (om-load-boxcall (quote genfun) "INTERVALS-MOD12" (quote om-ais::intervals-mod12) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists." "AIS" (list 5 4 0 9 7 2 8 1 3 6 10 11)))) (om-make-point 687 177) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 8" (om-make-point 37 30) (quote "1-5") "" (om-make-point 205 412) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 37 30) (quote "6-10") "" (om-make-point 754 422) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 37 30) (quote "5-9") "" (om-make-point 643 420) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 37 30) (quote "4-8") "" (om-make-point 544 418) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 37 30) (quote "3-7") "" (om-make-point 414 415) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 37 30) (quote "2-6") "" (om-make-point 313 412) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 7" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 748 481) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 6" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 645 483) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 5" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 535 481) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 4" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 401 481) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 3" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 293 482) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 424 266) (om-make-point 119 59) nil nil nil 7))) (setf (numouts box) 7) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 442 220) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 399 173) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 360 211) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-ROTATIONS" (quote om-ais::all-rotations) (quote ((om-load-inputfun (quote input-funbox) "AIS - list of pitch-classes" "PCS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 576 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 7" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxcall (quote genfun) "MOD12" (quote om-ais::mod12) (quote ((om-load-inputfun (quote input-funbox) "number or list of numbers" "ARGS" (list -1 -4 -5 -7)))) (om-make-point 290 247) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 196 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 234 114) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 274 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 186 432) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 195 29) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 189 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 177 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (6 0 1 0 nil 0) (2 0 3 0 nil 0) (5 0 3 1 nil 0) (7 0 4 0 nil 0) (5 0 6 0 nil 0) (1 0 7 1 nil 0) (1 0 7 2 nil 0) (0 0 7 3 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 311/2 345) nil (list (quote |6-Z43|)) nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 2" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 182 482) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 924 395) (om-make-point 64 30) (quote |6-Z17|) "|6-Z17|" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 844 483) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 37 30) (quote "7-11") "" (om-make-point 860 419) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 6" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxcall (quote genfun) "MOD12" (quote om-ais::mod12) (quote ((om-load-inputfun (quote input-funbox) "number or list of numbers" "ARGS" (list -1 -4 -5 -7)))) (om-make-point 263 213) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 196 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 234 114) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 274 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 186 432) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 195 29) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 189 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 177 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (6 0 1 0 nil 0) (2 0 3 0 nil 0) (5 0 3 1 nil 0) (7 0 4 0 nil 0) (5 0 6 0 nil 0) (1 0 7 1 nil 0) (1 0 7 2 nil 0) (0 0 7 3 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 545/2 347) nil (list (quote |6-Z23|)) nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 5" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxcall (quote genfun) "MOD12" (quote om-ais::mod12) (quote ((om-load-inputfun (quote input-funbox) "number or list of numbers" "ARGS" (list -1 -4 -5 -7)))) (om-make-point 290 245) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 196 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 234 114) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 274 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 186 432) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 195 29) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 189 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 177 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (6 0 1 0 nil 0) (2 0 3 0 nil 0) (5 0 3 1 nil 0) (7 0 4 0 nil 0) (5 0 6 0 nil 0) (1 0 7 1 nil 0) (1 0 7 2 nil 0) (0 0 7 3 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 747/2 345) nil (list (quote |6-Z50|)) nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 4" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxcall (quote genfun) "MOD12" (quote om-ais::mod12) (quote ((om-load-inputfun (quote input-funbox) "number or list of numbers" "ARGS" (list -1 -4 -5 -7)))) (om-make-point 282 239) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 196 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 234 114) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 274 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 186 432) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 195 29) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 189 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 177 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (6 0 1 0 nil 0) (2 0 3 0 nil 0) (5 0 3 1 nil 0) (7 0 4 0 nil 0) (5 0 6 0 nil 0) (1 0 7 1 nil 0) (1 0 7 2 nil 0) (0 0 7 3 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1005/2 357) nil (list (quote |6-Z44|)) nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 3" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxcall (quote genfun) "MOD12" (quote om-ais::mod12) (quote ((om-load-inputfun (quote input-funbox) "number or list of numbers" "ARGS" (list -1 -4 -5 -7)))) (om-make-point 289 251) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 196 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 234 114) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 274 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 186 432) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 195 29) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 189 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 177 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (6 0 1 0 nil 0) (2 0 3 0 nil 0) (5 0 3 1 nil 0) (7 0 4 0 nil 0) (5 0 6 0 nil 0) (1 0 7 1 nil 0) (1 0 7 2 nil 0) (0 0 7 3 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1201/2 358) nil (list (quote |6-Z6|)) nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 2" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxcall (quote genfun) "MOD12" (quote om-ais::mod12) (quote ((om-load-inputfun (quote input-funbox) "number or list of numbers" "ARGS" (list -1 -4 -5 -7)))) (om-make-point 287 232) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 196 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 234 114) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 274 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 186 432) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 195 29) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 189 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 177 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (6 0 1 0 nil 0) (2 0 3 0 nil 0) (5 0 3 1 nil 0) (7 0 4 0 nil 0) (5 0 6 0 nil 0) (1 0 7 1 nil 0) (1 0 7 2 nil 0) (0 0 7 3 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1423/2 356) nil (list (quote |6-5|)) nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxcall (quote genfun) "MOD12" (quote om-ais::mod12) (quote ((om-load-inputfun (quote input-funbox) "number or list of numbers" "ARGS" (list -1 -4 -5 -7)))) (om-make-point 283 239) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 196 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 234 114) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 274 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 186 432) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 195 29) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 189 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 177 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (6 0 1 0 nil 0) (2 0 3 0 nil 0) (5 0 3 1 nil 0) (7 0 4 0 nil 0) (5 0 6 0 nil 0) (1 0 7 1 nil 0) (1 0 7 2 nil 0) (0 0 7 3 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1635/2 342) nil (list (quote |6-Z17|)) nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMOR" (quote omor) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 514 563) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 95 34) (quote "INTERVALS") "" (om-make-point 179 309) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 12" 11 (om-make-point 1061 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 11" 10 (om-make-point 972 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 10" 9 (om-make-point 883 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 9" 8 (om-make-point 797 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 8" 7 (om-make-point 708 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 7" 6 (om-make-point 619 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 526 601) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 18 113) (om-make-point 1157 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 6" 5 (om-make-point 530 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 5" 4 (om-make-point 441 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 4" 3 (om-make-point 352 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 263 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 174 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 91 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((37 0 0 0 nil 0) (26 0 7 0 nil 0) (19 0 7 1 nil 0) (25 0 8 0 nil 0) (19 0 8 1 nil 0) (24 0 9 0 nil 0) (19 0 9 1 nil 0) (23 0 10 0 nil 0) (19 0 10 1 nil 0) (22 0 11 0 nil 0) (19 0 11 1 nil 0) (13 0 12 0 nil 0) (15 0 13 0 nil 0) (16 0 13 1 nil 0) (14 0 15 1 nil 0) (0 0 16 0 nil 0) (12 0 17 0 nil 0) (17 0 18 0 nil 0) (19 0 18 1 nil 0) (27 0 20 0 nil 0) (19 0 20 1 nil 0) (12 1 22 0 nil 0) (12 2 23 0 nil 0) (12 3 24 0 nil 0) (12 4 25 0 nil 0) (12 5 26 0 nil 0) (12 6 27 0 nil 0) (18 0 28 0 nil 0) (11 0 28 1 nil 0) (10 0 28 2 nil 0) (9 0 28 3 nil 0) (8 0 28 4 nil 0) (7 0 28 5 nil 0) (20 0 28 6 nil 0) (28 0 36 0 nil 0) (43 0 37 0 nil 0) (42 0 37 1 nil 0) (41 0 37 2 nil 0) (40 0 37 3 nil 0) (39 0 37 4 nil 0) (38 0 37 5 nil 0) (35 0 37 6 nil 0) (34 0 37 7 nil 0) (33 0 37 8 nil 0) (32 0 37 9 nil 0) (31 0 37 10 nil 0) (30 0 37 11 nil 0))) 6.18 nil "" (om-make-point 113 86) (om-make-point 1203 621)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil) (om-load-inputfun (quote input-funbox) "" "input 5" nil) (om-load-inputfun (quote input-funbox) "" "input 6" nil) (om-load-inputfun (quote input-funbox) "" "input 7" nil) (om-load-inputfun (quote input-funbox) "" "input 8" nil) (om-load-inputfun (quote input-funbox) "" "input 9" nil) (om-load-inputfun (quote input-funbox) "" "input 10" nil) (om-load-inputfun (quote input-funbox) "" "input 11" nil) (om-load-inputfun (quote input-funbox) "" "input 12" nil))) (om-make-point 4559/7 63) nil (list nil) "l" "LINK-CHORDS"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 542 318) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TIME" (quote time) (quote ((om-load-inputfun (quote input-funbox) "FORM" "FORM" nil))) (om-make-point 914 277) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH 3" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 910 211) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 167 42) (quote "Number of possible permutations.") "" (om-make-point 26 243) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "prime-form-AIS" (om-load-patch-abs1 "prime-form-AIS" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 115 436) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "=" (quote =) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 126 389) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 83 321) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 83 273) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 42 213) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD 2" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 24 243) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "- 2" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 14 177) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 1 134) (om-make-point 24 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 161 80) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 130 115) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "-" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 130 61) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "?2" 1 (om-make-point 99 0) "" "?2" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "?1" 0 (om-make-point 159 0) "" "?1" nil (om-make-point 24 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (9 0 1 1 nil 0) (3 0 2 0 nil 0) (5 0 3 0 nil 0) (9 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (7 0 6 0 nil 0) (9 0 6 1 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (11 0 10 0 nil 0) (12 0 10 1 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "?1" nil) (om-load-inputfun (quote input-funbox) "" "?2" nil))) (om-make-point 506 77) nil (list nil) "l" "prime-form-AIS"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 607 121) (om-make-point 48 30) (list 1 2) "(1 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INDEX-RULE" (quote omcs::index-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "list" "INDEX-NUMBERS" (list 1)))) (om-make-point 531 161) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 249 55) (quote "LINK-CHORDS$ALL CHORD THAT HAVE THE ALL-TRICHORD HEXACHORD (6-Z17) ") "" (om-make-point 858 68) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 424 436) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-VIEW 2" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 398 486) (om-make-point 93 43) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 69 23) "untitled"))) (om-set-dialog-item-text rep "194") rep) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 300 83) (quote "Based on the Patch from PWGL$(For more information, see PWGL Book, p.142,  by Mikael Laurson and Mika Kuuskankare, and PWConstraints, by Mikael Laurson.)") "" (om-make-point 64 0) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "no-dup-intervals 3" (om-load-patch-abs1 "no-dup-intervals" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 107 156) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 67 96) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "<=" (quote <=) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 78 199) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 21 442) (om-make-point 274 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 147 402) (om-make-point 24 30) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 198 97) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 127 98) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MEMBER" (quote member) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 202 328) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NOT" (quote not) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 214 381) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 266 279) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 252 144) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD 2" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 245 181) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 257 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 291 96) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 206 171) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 176 212) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 164 163) (om-make-point 24 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REV-PARTIAL-SOLUTION" (quote omcs::rev-partial-solution) (quote nil) (om-make-point 126 0) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 134 514) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((17 0 1 0 nil 0) (1 0 2 0 nil 0) (0 0 2 1 nil 0) (2 0 3 0 nil 0) (4 0 3 1 nil 0) (8 0 3 2 nil 0) (17 0 5 0 nil 0) (17 0 6 0 nil 0) (15 0 7 0 nil 0) (9 0 7 1 nil 0) (7 0 8 0 nil 0) (12 0 9 0 nil 0) (10 0 11 1 nil 0) (11 0 12 0 nil 0) (13 0 12 1 nil 0) (17 0 13 0 nil 0) (16 0 15 0 nil 0) (14 0 15 1 nil 0) (6 0 16 0 nil 0) (5 0 16 1 nil 0) (3 0 18 0 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 407 70) nil (list nil) "l" "no-dup-intervals"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-VIEW" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 57 195) (om-make-point 93 43) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 69 23) "untitled"))) (om-set-dialog-item-text rep "3628800") rep) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 90 114) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FACTORIAL" (quote factorial) (quote ((om-load-inputfun (quote input-funbox) "N" "N" nil))) (om-make-point 79 148) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "no-dup-notes 2" (om-load-patch-abs1 "no-dup-notes" (quote ((let ((box (om-load-boxcall (quote lispfun) "NOT 2" (quote not) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 154 209) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MEMBER" (quote member) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 142 140) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 72 7) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 192 82) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REV-PARTIAL-SOLUTION" (quote omcs::rev-partial-solution) (quote nil) (om-make-point 195 3) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 143 279) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 1 1 nil 0) (4 0 3 0 nil 0) (0 0 5 0 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 328 70) nil (list nil) "l" "no-dup-notes"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 484 314) (om-make-point 38 30) (quote :all) ":all" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 6" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 336 273) (om-make-point 93 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 281 150) (om-make-point 37 30) (list 6) "(6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 284 191) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PMC-ENGINE" (quote omcs::pmc-engine) (quote ((om-load-inputfun (quote input-funbox) "s-space" "S-SPACE" nil) (om-load-inputfun (quote input-funbox) "rules" "RULES" nil) (om-load-inputfun (quote input-funbox) "heuristic-rules" "HEURISTIC-RULES" nil) (om-load-inputfun (quote input-funbox) "fwc-rules" "FWC-RULES" nil) (om-load-inputfun (quote input-funbox) "sols-mode" "SOLS-MODE" (quote :all)) (om-load-inputfun (quote input-funbox) "random?" "RND?" nil) (om-load-inputfun (quote input-funbox) "print-indexnr?" "PRINT-FL" nil))) (om-make-point 259 349) (om-make-point 378 59) nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WILDCARD-RULE 2" (quote omcs::wildcard-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil))) (om-make-point 433 151) (om-make-point 44 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WILDCARD-RULE" (quote omcs::wildcard-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil))) (om-make-point 337 147) (om-make-point 60 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 181 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 216 248) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 263 105) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 220 145) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 166 72) (om-make-point 149 30) (list 11 10 9 8 7 5 4 3 2 1) "(11 10 9 8 7 5 4 3 2 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 178 148) (om-make-point 37 30) (list 0) "(0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 2 0 nil 0) (5 0 6 0 nil 0) (32 0 7 0 nil 0) (11 0 10 0 nil 0) (9 0 10 1 nil 0) (14 0 13 0 nil 0) (8 0 14 0 nil 0) (16 0 18 0 nil 0) (17 0 18 1 nil 0) (7 0 20 0 nil 0) (20 0 21 0 nil 0) (26 0 24 0 nil 0) (25 0 26 0 nil 0) (34 0 29 0 nil 0) (33 0 29 1 nil 0) (18 0 29 2 nil 0) (10 0 29 3 nil 0) (30 0 31 0 nil 0) (36 0 32 0 nil 0) (29 0 32 1 nil 0) (28 0 32 4 nil 0) (12 0 32 5 nil 0) (23 0 33 0 nil 0) (27 0 34 0 nil 0) (40 0 35 0 nil 0) (35 0 36 0 nil 0) (38 0 36 1 nil 0) (31 0 36 2 nil 0) (39 0 38 0 nil 0) (37 0 38 1 nil 0))) nil 6.18))