; OM File Header - Saved 2021/05/01 17:08:17
; (6.18 :patc (om-make-point 10 10) (om-make-point -1366 23) (om-make-point 1136 701) "" 183 0 nil "2021/05/01 17:08:17")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCS" "OM-AIS")))(setf *om-current-persistent* (om-load-patch1 "AIS-calculations" (quote ((let ((box (om-load-boxcall (quote abstraction) "ADDITIONAL-INDEX-RULES" (om-load-patch-abs1 "ADDITIONAL-INDEX-RULES" (quote ((let ((box (om-load-boxcall (quote abstraction) "MYSTERY" (om-load-patch-abs1 "MYSTERY" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 400 322) (om-make-point 50 30) (quote equal) "equal" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REMOVE-DUP 2" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 369 370) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH 2" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 463 144) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 426 164) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 451 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 18 81) (om-make-point 759 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "circular-permutations 2" (om-load-patch-abs1 "circular-permutations" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 79 558) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "n" 1 (om-make-point 189 11) "" "n" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 77 5) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 160 310) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 145 211) (om-make-point 34 30) 13 "13" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 135 260) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 190 199) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 257 66) (om-make-point 34 30) 11 "11" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 209 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 139 115) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AIS->NORMAL" (quote om-ais::ais->normal) (quote ((om-load-inputfun (quote input-funbox) "AIS - list of pitch-classes" "AIS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 65 449) (om-make-point 76 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POSN-MATCH" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "a list positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 69 373) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 0 0 nil 0) (5 0 3 0 nil 0) (6 0 3 1 nil 0) (4 0 5 1 nil 0) (9 0 6 0 nil 0) (8 0 6 1 nil 0) (1 0 8 0 nil 0) (7 0 8 1 nil 0) (1 0 9 0 nil 0) (11 0 10 0 nil 0) (2 0 11 0 nil 0) (3 0 11 1 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 700/3 433/3) nil (list nil) "l" "circular-permutations"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 373 249) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 439 443) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "A" 0) (om-load-inputfun (quote input-funbox) "a number" "B" 0))) (om-make-point 387 492) (om-make-point 22 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 326 436) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 12" 11 (om-make-point 689 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 11" 10 (om-make-point 631 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 10" 9 (om-make-point 573 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 9" 8 (om-make-point 518 2) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 8" 7 (om-make-point 460 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 7" 6 (om-make-point 402 1) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 374 549) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 6" 5 (om-make-point 344 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 5" 4 (om-make-point 286 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 4" 3 (om-make-point 228 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 184 0) "" nil nil (om-make-point 21 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 111 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 60 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 1 0 nil 0) (0 0 1 1 nil 0) (5 0 2 0 nil 0) (3 0 4 0 nil 0) (2 0 4 1 nil 0) (3 0 4 2 nil 0) (23 0 5 0 nil 0) (22 0 5 1 nil 0) (21 0 5 2 nil 0) (20 0 5 3 nil 0) (19 0 5 4 nil 0) (18 0 5 5 nil 0) (16 0 5 6 nil 0) (15 0 5 7 nil 0) (14 0 5 8 nil 0) (13 0 5 9 nil 0) (12 0 5 10 nil 0) (11 0 5 11 nil 0) (5 0 6 0 nil 0) (6 0 7 0 nil 0) (4 0 7 1 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (1 0 10 0 nil 0) (9 0 17 0 nil 0))) 6.18 nil "" (om-make-point 189 55) (om-make-point 1143 635)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil) (om-load-inputfun (quote input-funbox) "" "input 5" nil) (om-load-inputfun (quote input-funbox) "" "input 6" nil) (om-load-inputfun (quote input-funbox) "" "input 7" nil) (om-load-inputfun (quote input-funbox) "" "input 8" nil) (om-load-inputfun (quote input-funbox) "" "input 9" nil) (om-load-inputfun (quote input-funbox) "" "input 10" nil) (om-load-inputfun (quote input-funbox) "" "input 11" nil) (om-load-inputfun (quote input-funbox) "" "input 12" nil))) (om-make-point 702/7 379) nil (list nil) "l" "MYSTERY"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 6" 5 (om-make-point 206 565) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "MYSTERY" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INDEX-RULE 4" (quote omcs::index-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "list" "INDEX-NUMBERS" (list 1)))) (om-make-point 206 478) (om-make-point 64 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 162 330) (om-make-point 177 30) (list 1 2 3 4 5 6 7 8 9 10 11 12) "(1 2 3 4 5 6 7 8 9 10 11 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1082 10) (om-make-point 177 30) (list 1 2 3 4 5 6 7 8 9 10 11 12) "(1 2 3 4 5 6 7 8 9 10 11 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INDEX-RULE 3" (quote omcs::index-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "list" "INDEX-NUMBERS" (list 1)))) (om-make-point 1126 158) (om-make-point 64 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "LINK-CHORDS-TWO-INSTANCES" (om-load-patch-abs1 "LINK-CHORDS-TWO-INSTANCES" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 596 552) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "A" 0) (om-load-inputfun (quote input-funbox) "a number" "B" 0))) (om-make-point 569 597) (om-make-point 22 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 7" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 173 323) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 195 29) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 160 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 149 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 2 0 nil 0) (2 0 3 1 nil 0) (2 0 3 2 nil 0) (1 0 3 3 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 359/2 342) nil (list (quote |6-Z25|)) nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-ROTATIONS" (quote om-ais::all-rotations) (quote ((om-load-inputfun (quote input-funbox) "AIS - list of pitch-classes" "PCS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 641 181) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 454 200) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 508 170) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 546 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 524 275) (om-make-point 88 59) nil nil nil 7))) (setf (numouts box) 7) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 6" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 136) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 345 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 160 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 149 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 2 0 nil 0) (2 0 3 1 nil 0) (2 0 3 2 nil 0) (1 0 3 3 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 575/2 342) nil (list (quote |6-27|)) nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 5" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 136) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 345 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 160 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 149 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 2 0 nil 0) (2 0 3 1 nil 0) (2 0 3 2 nil 0) (1 0 3 3 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 791/2 342) nil (list (quote |6-Z11|)) nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 4" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 136) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 345 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 160 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 149 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 2 0 nil 0) (2 0 3 1 nil 0) (2 0 3 2 nil 0) (1 0 3 3 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1061/2 342) nil (list (quote |6-Z17|)) nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 3" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 136) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 345 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 160 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 149 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 2 0 nil 0) (2 0 3 1 nil 0) (2 0 3 2 nil 0) (1 0 3 3 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1279/2 342) nil (list (quote |6-Z17|)) nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 2" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 136) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 345 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 160 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 149 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 2 0 nil 0) (2 0 3 1 nil 0) (2 0 3 2 nil 0) (1 0 3 3 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1481/2 342) nil (list (quote |6-Z6|)) nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 136) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 345 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 160 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 149 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 2 0 nil 0) (2 0 3 1 nil 0) (2 0 3 2 nil 0) (1 0 3 3 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1769/2 342) nil (list (quote |6-Z47|)) nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 528 441) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 370 444) (om-make-point 64 30) (quote |6-Z17|) "|6-Z17|" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE-IF" (quote remove-if) (quote ((om-load-inputfun (quote input-funbox) "PREDICATE" "PREDICATE" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 521 489) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "remove-if-not-equal" (om-load-patch-abs1 "remove-if-not-equal" (quote ((let ((box (om-load-boxin "input 2" 1 (om-make-point 174 14) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 168 190) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 93 10) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 101 100) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NOT" (quote not) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 132 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 1 0 nil 0) (2 0 3 0 nil 0) (0 0 3 1 nil 0) (3 0 4 0 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 719/2 961/2) nil (list nil) "l" "remove-if-not-equal"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 527 540) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 12" 11 (om-make-point 1061 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 11" 10 (om-make-point 972 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 10" 9 (om-make-point 883 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 9" 8 (om-make-point 797 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 8" 7 (om-make-point 708 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 7" 6 (om-make-point 619 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 556 646) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 18 113) (om-make-point 1157 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 6" 5 (om-make-point 530 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 5" 4 (om-make-point 441 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 4" 3 (om-make-point 352 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 263 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 174 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 91 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((18 0 1 0 nil 0) (0 0 1 1 nil 0) (7 0 2 0 nil 0) (26 0 3 0 nil 0) (5 0 4 1 nil 0) (4 0 6 0 nil 0) (3 0 6 1 nil 0) (6 0 7 0 nil 0) (7 1 8 0 nil 0) (7 2 9 0 nil 0) (7 3 10 0 nil 0) (7 4 11 0 nil 0) (7 5 12 0 nil 0) (7 6 13 0 nil 0) (2 0 14 0 nil 0) (8 0 14 1 nil 0) (9 0 14 2 nil 0) (10 0 14 3 nil 0) (11 0 14 4 nil 0) (12 0 14 5 nil 0) (13 0 14 6 nil 0) (17 0 16 0 nil 0) (14 0 16 1 nil 0) (15 0 17 0 nil 0) (16 0 18 0 nil 0) (1 0 25 0 nil 0) (32 0 26 0 nil 0) (31 0 26 1 nil 0) (30 0 26 2 nil 0) (29 0 26 3 nil 0) (28 0 26 4 nil 0) (27 0 26 5 nil 0) (24 0 26 6 nil 0) (23 0 26 7 nil 0) (22 0 26 8 nil 0) (21 0 26 9 nil 0) (20 0 26 10 nil 0) (19 0 26 11 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 1052 542)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil) (om-load-inputfun (quote input-funbox) "" "input 5" nil) (om-load-inputfun (quote input-funbox) "" "input 6" nil) (om-load-inputfun (quote input-funbox) "" "input 7" nil) (om-load-inputfun (quote input-funbox) "" "input 8" nil) (om-load-inputfun (quote input-funbox) "" "input 9" nil) (om-load-inputfun (quote input-funbox) "" "input 10" nil) (om-load-inputfun (quote input-funbox) "" "input 11" nil) (om-load-inputfun (quote input-funbox) "" "input 12" nil))) (om-make-point 6771/7 73) nil (list nil) "l" "LINK-CHORDS-TWO-INSTANCES"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "LINK-CHORDS-ALL" (om-load-patch-abs1 "LINK-CHORDS-ALL" (quote ((let ((box (om-load-boxcall (quote genfun) "INTERVALS-MOD12" (quote om-ais::intervals-mod12) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists." "AIS" (list 5 4 0 9 7 2 8 1 3 6 10 11)))) (om-make-point 687 177) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 8" (om-make-point 37 30) (quote "1-5") "" (om-make-point 205 412) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 37 30) (quote "6-10") "" (om-make-point 754 422) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 37 30) (quote "5-9") "" (om-make-point 643 420) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 37 30) (quote "4-8") "" (om-make-point 544 418) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 37 30) (quote "3-7") "" (om-make-point 414 415) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 37 30) (quote "2-6") "" (om-make-point 313 412) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 7" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 748 481) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 6" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 645 483) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 5" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 535 481) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 4" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 401 481) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 3" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 293 482) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 424 266) (om-make-point 119 59) nil nil nil 7))) (setf (numouts box) 7) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 442 220) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 399 173) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 360 211) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-ROTATIONS" (quote om-ais::all-rotations) (quote ((om-load-inputfun (quote input-funbox) "AIS - list of pitch-classes" "PCS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 576 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 7" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxcall (quote genfun) "MOD12" (quote om-ais::mod12) (quote ((om-load-inputfun (quote input-funbox) "number or list of numbers" "ARGS" (list -1 -4 -5 -7)))) (om-make-point 290 247) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 196 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 234 114) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 274 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 186 432) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 195 29) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 189 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 177 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (6 0 1 0 nil 0) (2 0 3 0 nil 0) (5 0 3 1 nil 0) (7 0 4 0 nil 0) (5 0 6 0 nil 0) (1 0 7 1 nil 0) (1 0 7 2 nil 0) (0 0 7 3 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 311/2 345) nil (list (quote |6-Z43|)) nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 2" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 182 482) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 924 395) (om-make-point 64 30) (quote |6-Z17|) "|6-Z17|" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 844 483) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 37 30) (quote "7-11") "" (om-make-point 860 419) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 6" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxcall (quote genfun) "MOD12" (quote om-ais::mod12) (quote ((om-load-inputfun (quote input-funbox) "number or list of numbers" "ARGS" (list -1 -4 -5 -7)))) (om-make-point 263 213) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 196 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 234 114) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 274 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 186 432) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 195 29) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 189 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 177 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (6 0 1 0 nil 0) (2 0 3 0 nil 0) (5 0 3 1 nil 0) (7 0 4 0 nil 0) (5 0 6 0 nil 0) (1 0 7 1 nil 0) (1 0 7 2 nil 0) (0 0 7 3 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 545/2 347) nil (list (quote |6-Z23|)) nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 5" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxcall (quote genfun) "MOD12" (quote om-ais::mod12) (quote ((om-load-inputfun (quote input-funbox) "number or list of numbers" "ARGS" (list -1 -4 -5 -7)))) (om-make-point 290 245) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 196 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 234 114) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 274 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 186 432) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 195 29) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 189 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 177 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (6 0 1 0 nil 0) (2 0 3 0 nil 0) (5 0 3 1 nil 0) (7 0 4 0 nil 0) (5 0 6 0 nil 0) (1 0 7 1 nil 0) (1 0 7 2 nil 0) (0 0 7 3 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 747/2 345) nil (list (quote |6-Z50|)) nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 4" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxcall (quote genfun) "MOD12" (quote om-ais::mod12) (quote ((om-load-inputfun (quote input-funbox) "number or list of numbers" "ARGS" (list -1 -4 -5 -7)))) (om-make-point 282 239) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 196 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 234 114) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 274 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 186 432) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 195 29) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 189 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 177 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (6 0 1 0 nil 0) (2 0 3 0 nil 0) (5 0 3 1 nil 0) (7 0 4 0 nil 0) (5 0 6 0 nil 0) (1 0 7 1 nil 0) (1 0 7 2 nil 0) (0 0 7 3 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1005/2 357) nil (list (quote |6-Z44|)) nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 3" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxcall (quote genfun) "MOD12" (quote om-ais::mod12) (quote ((om-load-inputfun (quote input-funbox) "number or list of numbers" "ARGS" (list -1 -4 -5 -7)))) (om-make-point 289 251) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 196 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 234 114) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 274 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 186 432) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 195 29) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 189 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 177 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (6 0 1 0 nil 0) (2 0 3 0 nil 0) (5 0 3 1 nil 0) (7 0 4 0 nil 0) (5 0 6 0 nil 0) (1 0 7 1 nil 0) (1 0 7 2 nil 0) (0 0 7 3 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1201/2 358) nil (list (quote |6-Z6|)) nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name 2" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxcall (quote genfun) "MOD12" (quote om-ais::mod12) (quote ((om-load-inputfun (quote input-funbox) "number or list of numbers" "ARGS" (list -1 -4 -5 -7)))) (om-make-point 287 232) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 196 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 234 114) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 274 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 186 432) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 195 29) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 189 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 177 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (6 0 1 0 nil 0) (2 0 3 0 nil 0) (5 0 3 1 nil 0) (7 0 4 0 nil 0) (5 0 6 0 nil 0) (1 0 7 1 nil 0) (1 0 7 2 nil 0) (0 0 7 3 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1423/2 356) nil (list (quote |6-5|)) nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "forte-name" (om-load-patch-abs1 "forte-name" (quote ((let ((box (om-load-boxcall (quote genfun) "MOD12" (quote om-ais::mod12) (quote ((om-load-inputfun (quote input-funbox) "number or list of numbers" "ARGS" (list -1 -4 -5 -7)))) (om-make-point 283 239) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 196 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 234 114) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 274 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 186 432) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 195 29) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 189 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-POWER 2" (quote sub-power) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "LOW" 3) (om-load-inputfun (quote input-funbox) "" "HIGH" 3) (om-load-inputfun (quote input-funbox) "" "SET" (list 11 0 5 6)))) (om-make-point 177 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (6 0 1 0 nil 0) (2 0 3 0 nil 0) (5 0 3 1 nil 0) (7 0 4 0 nil 0) (5 0 6 0 nil 0) (1 0 7 1 nil 0) (1 0 7 2 nil 0) (0 0 7 3 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1635/2 342) nil (list (quote |6-Z17|)) nil "forte-name"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMOR" (quote omor) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 514 563) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 95 34) (quote "INTERVALS") "" (om-make-point 179 309) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 12" 11 (om-make-point 1061 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 11" 10 (om-make-point 972 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 10" 9 (om-make-point 883 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 9" 8 (om-make-point 797 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 8" 7 (om-make-point 708 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 7" 6 (om-make-point 619 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 526 601) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 18 113) (om-make-point 1157 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 6" 5 (om-make-point 530 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 5" 4 (om-make-point 441 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 4" 3 (om-make-point 352 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 263 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 174 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 91 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((37 0 0 0 nil 0) (26 0 7 0 nil 0) (19 0 7 1 nil 0) (25 0 8 0 nil 0) (19 0 8 1 nil 0) (24 0 9 0 nil 0) (19 0 9 1 nil 0) (23 0 10 0 nil 0) (19 0 10 1 nil 0) (22 0 11 0 nil 0) (19 0 11 1 nil 0) (13 0 12 0 nil 0) (15 0 13 0 nil 0) (16 0 13 1 nil 0) (14 0 15 1 nil 0) (0 0 16 0 nil 0) (12 0 17 0 nil 0) (17 0 18 0 nil 0) (19 0 18 1 nil 0) (27 0 20 0 nil 0) (19 0 20 1 nil 0) (12 1 22 0 nil 0) (12 2 23 0 nil 0) (12 3 24 0 nil 0) (12 4 25 0 nil 0) (12 5 26 0 nil 0) (12 6 27 0 nil 0) (18 0 28 0 nil 0) (11 0 28 1 nil 0) (10 0 28 2 nil 0) (9 0 28 3 nil 0) (8 0 28 4 nil 0) (7 0 28 5 nil 0) (20 0 28 6 nil 0) (28 0 36 0 nil 0) (43 0 37 0 nil 0) (42 0 37 1 nil 0) (41 0 37 2 nil 0) (40 0 37 3 nil 0) (39 0 37 4 nil 0) (38 0 37 5 nil 0) (35 0 37 6 nil 0) (34 0 37 7 nil 0) (33 0 37 8 nil 0) (32 0 37 9 nil 0) (31 0 37 10 nil 0) (30 0 37 11 nil 0))) 6.18 nil "" (om-make-point -1024 58) (om-make-point 1017 544)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil) (om-load-inputfun (quote input-funbox) "" "input 5" nil) (om-load-inputfun (quote input-funbox) "" "input 6" nil) (om-load-inputfun (quote input-funbox) "" "input 7" nil) (om-load-inputfun (quote input-funbox) "" "input 8" nil) (om-load-inputfun (quote input-funbox) "" "input 9" nil) (om-load-inputfun (quote input-funbox) "" "input 10" nil) (om-load-inputfun (quote input-funbox) "" "input 11" nil) (om-load-inputfun (quote input-funbox) "" "input 12" nil))) (om-make-point 5595/7 69) nil (list nil) "l" "LINK-CHORDS-ALL"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INDEX-RULE 6" (quote omcs::index-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "list" "INDEX-NUMBERS" (list 1)))) (om-make-point 887 152) (om-make-point 64 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 843 41) (om-make-point 177 30) (list 1 2 3 4 5 6 7 8 9 10 11 12) "(1 2 3 4 5 6 7 8 9 10 11 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 4" 4 (om-make-point 1062 259) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "LINK-CHORDS-TWO-INSTANCES" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 3 (om-make-point 861 265) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "LINK-CHORDS-ALL" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 5" 2 (om-make-point 633 249) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "QRMI-INVARIANT" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "QRMI-INVARIANT" (om-load-patch-abs1 "QRMI-INVARIANT" (quote ((let ((box (om-load-boxcall (quote genfun) "IM-AIS" (quote om-ais::im-ais) (quote ((om-load-inputfun (quote input-funbox) "AIS" "AIS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 382 286) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "QR-AIS" (quote om-ais::qr-ais) (quote ((om-load-inputfun (quote input-funbox) "AIS" "AIS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 385 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 305 418) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 310 364) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 265 160) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 12" 11 (om-make-point 576 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 11" 10 (om-make-point 526 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 10" 9 (om-make-point 476 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 9" 8 (om-make-point 426 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 8" 7 (om-make-point 376 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 7" 6 (om-make-point 326 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 6" 5 (om-make-point 276 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 5" 4 (om-make-point 226 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 4" 3 (om-make-point 176 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 126 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 76 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 26 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (4 0 1 0 nil 0) (3 0 2 0 nil 0) (4 0 3 0 nil 0) (0 0 3 1 nil 0) (16 0 4 0 nil 0) (15 0 4 1 nil 0) (14 0 4 2 nil 0) (13 0 4 3 nil 0) (12 0 4 4 nil 0) (11 0 4 5 nil 0) (10 0 4 6 nil 0) (9 0 4 7 nil 0) (8 0 4 8 nil 0) (7 0 4 9 nil 0) (6 0 4 10 nil 0) (5 0 4 11 nil 0))) 6.18 nil "" (om-make-point 199 199) (om-make-point 691 485)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil) (om-load-inputfun (quote input-funbox) "" "input 5" nil) (om-load-inputfun (quote input-funbox) "" "input 6" nil) (om-load-inputfun (quote input-funbox) "" "input 7" nil) (om-load-inputfun (quote input-funbox) "" "input 8" nil) (om-load-inputfun (quote input-funbox) "" "input 9" nil) (om-load-inputfun (quote input-funbox) "" "input 10" nil) (om-load-inputfun (quote input-funbox) "" "input 11" nil) (om-load-inputfun (quote input-funbox) "" "input 12" nil))) (om-make-point 566 66) nil (list nil) "l" "QRMI-INVARIANT"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 613 41) (om-make-point 174 31) (list 1 2 3 4 5 6 7 8 9 10 11 12) "(1 2 3 4 5 6 7 8 9 10 11 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INDEX-RULE 5" (quote omcs::index-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "list" "INDEX-NUMBERS" (list 1)))) (om-make-point 656 137) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 384 245) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "R-INVARIANT" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 152 247) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "QI-INVARIANT" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INDEX-RULE" (quote omcs::index-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "list" "INDEX-NUMBERS" (list 1)))) (om-make-point 396 129) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 351 33) (om-make-point 174 31) (list 1 2 3 4 5 6 7 8 9 10 11 12) "(1 2 3 4 5 6 7 8 9 10 11 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "R-INVARIANT" (om-load-patch-abs1 "R-INVARIANT" (quote ((let ((box (om-load-boxcall (quote genfun) "R-AIS" (quote om-ais::r-ais) (quote ((om-load-inputfun (quote input-funbox) "AIS" "AIS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 369 204) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 305 341) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 310 270) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 265 160) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 12" 11 (om-make-point 576 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 11" 10 (om-make-point 526 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 10" 9 (om-make-point 476 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 9" 8 (om-make-point 426 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 8" 7 (om-make-point 376 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 7" 6 (om-make-point 326 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 6" 5 (om-make-point 276 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 5" 4 (om-make-point 226 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 4" 3 (om-make-point 176 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 126 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 76 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 26 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (0 0 2 1 nil 0) (15 0 3 0 nil 0) (14 0 3 1 nil 0) (13 0 3 2 nil 0) (12 0 3 3 nil 0) (11 0 3 4 nil 0) (10 0 3 5 nil 0) (9 0 3 6 nil 0) (8 0 3 7 nil 0) (7 0 3 8 nil 0) (6 0 3 9 nil 0) (5 0 3 10 nil 0) (4 0 3 11 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil) (om-load-inputfun (quote input-funbox) "" "input 5" nil) (om-load-inputfun (quote input-funbox) "" "input 6" nil) (om-load-inputfun (quote input-funbox) "" "input 7" nil) (om-load-inputfun (quote input-funbox) "" "input 8" nil) (om-load-inputfun (quote input-funbox) "" "input 9" nil) (om-load-inputfun (quote input-funbox) "" "input 10" nil) (om-load-inputfun (quote input-funbox) "" "input 11" nil) (om-load-inputfun (quote input-funbox) "" "input 12" nil))) (om-make-point 304 58) nil (list nil) "l" "R-INVARIANT"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INDEX-RULE 2" (quote omcs::index-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "list" "INDEX-NUMBERS" (list 1)))) (om-make-point 166 166) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 88 25) (om-make-point 177 26) (list 1 2 3 4 5 6 7 8 9 10 11 12) "(1 2 3 4 5 6 7 8 9 10 11 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "QI-INVARIANT" (om-load-patch-abs1 "QI-INVARIANT" (quote ((let ((box (om-load-boxcall (quote genfun) "I-AIS" (quote om-ais::i-ais) (quote ((om-load-inputfun (quote input-funbox) "AIS" "AIS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 217 199) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-AIS" (quote om-ais::q-ais) (quote ((om-load-inputfun (quote input-funbox) "AIS" "AIS" (list 0 1 3 2 7 10 8 4 11 5 9 6)))) (om-make-point 403 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 305 341) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 310 270) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 265 160) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 12" 11 (om-make-point 576 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 11" 10 (om-make-point 526 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 10" 9 (om-make-point 476 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 9" 8 (om-make-point 426 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 8" 7 (om-make-point 376 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 7" 6 (om-make-point 326 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 6" 5 (om-make-point 276 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 5" 4 (om-make-point 226 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 4" 3 (om-make-point 176 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 126 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 76 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 26 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (4 0 1 0 nil 0) (3 0 2 0 nil 0) (0 0 3 0 nil 0) (1 0 3 1 nil 0) (16 0 4 0 nil 0) (15 0 4 1 nil 0) (14 0 4 2 nil 0) (13 0 4 3 nil 0) (12 0 4 4 nil 0) (11 0 4 5 nil 0) (10 0 4 6 nil 0) (9 0 4 7 nil 0) (8 0 4 8 nil 0) (7 0 4 9 nil 0) (6 0 4 10 nil 0) (5 0 4 11 nil 0))) 6.18 nil "" (om-make-point -1188 99) (om-make-point 676 509)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil) (om-load-inputfun (quote input-funbox) "" "input 5" nil) (om-load-inputfun (quote input-funbox) "" "input 6" nil) (om-load-inputfun (quote input-funbox) "" "input 7" nil) (om-load-inputfun (quote input-funbox) "" "input 8" nil) (om-load-inputfun (quote input-funbox) "" "input 9" nil) (om-load-inputfun (quote input-funbox) "" "input 10" nil) (om-load-inputfun (quote input-funbox) "" "input 11" nil) (om-load-inputfun (quote input-funbox) "" "input 12" nil))) (om-make-point 55 49) nil (list nil) "l" "QI-INVARIANT"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (0 0 2 0 nil 0) (3 0 2 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (7 0 8 0 nil 0) (9 0 8 1 nil 0) (5 0 10 0 nil 0) (8 0 11 0 nil 0) (15 0 12 0 nil 0) (13 0 15 0 nil 0) (14 0 15 1 nil 0) (18 0 16 0 nil 0) (21 0 17 0 nil 0) (20 0 18 0 nil 0) (19 0 18 1 nil 0) (23 0 21 0 nil 0) (22 0 21 1 nil 0))) 6.18 nil "" (om-make-point -1292 23) (om-make-point 1290 647)) (quote nil) (om-make-point 4073/6 496/3) nil (list (list (quote i1) (quote i2) (quote i3) (quote i4) (quote i5) (quote i6) (quote i7) (quote i8) (quote i9) (quote i10) (quote i11) (quote i12) (list (quote common-lisp-user::?if) (list (quote funcall) nil (quote i1) (quote i2) (quote i3) (quote i4) (quote i5) (quote i6) (quote i7) (quote i8) (quote i9) (quote i10) (quote i11) (quote i12)))) (list (quote i1) (quote i2) (quote i3) (quote i4) (quote i5) (quote i6) (quote i7) (quote i8) (quote i9) (quote i10) (quote i11) (quote i12) (list (quote common-lisp-user::?if) (list (quote funcall) nil (quote i1) (quote i2) (quote i3) (quote i4) (quote i5) (quote i6) (quote i7) (quote i8) (quote i9) (quote i10) (quote i11) (quote i12)))) (list (quote i1) (quote i2) (quote i3) (quote i4) (quote i5) (quote i6) (quote i7) (quote i8) (quote i9) (quote i10) (quote i11) (quote i12) (list (quote common-lisp-user::?if) (list (quote funcall) nil (quote i1) (quote i2) (quote i3) (quote i4) (quote i5) (quote i6) (quote i7) (quote i8) (quote i9) (quote i10) (quote i11) (quote i12)))) (list (quote i1) (quote i2) (quote i3) (quote i4) (quote i5) (quote i6) (quote i7) (quote i8) (quote i9) (quote i10) (quote i11) (quote i12) (list (quote common-lisp-user::?if) (list (quote funcall) nil (quote i1) (quote i2) (quote i3) (quote i4) (quote i5) (quote i6) (quote i7) (quote i8) (quote i9) (quote i10) (quote i11) (quote i12)))) (list (quote i1) (quote i2) (quote i3) (quote i4) (quote i5) (quote i6) (quote i7) (quote i8) (quote i9) (quote i10) (quote i11) (quote i12) (list (quote common-lisp-user::?if) (list (quote funcall) nil (quote i1) (quote i2) (quote i3) (quote i4) (quote i5) (quote i6) (quote i7) (quote i8) (quote i9) (quote i10) (quote i11) (quote i12)))) (list (quote i1) (quote i2) (quote i3) (quote i4) (quote i5) (quote i6) (quote i7) (quote i8) (quote i9) (quote i10) (quote i11) (quote i12) (list (quote common-lisp-user::?if) (list (quote funcall) nil (quote i1) (quote i2) (quote i3) (quote i4) (quote i5) (quote i6) (quote i7) (quote i8) (quote i9) (quote i10) (quote i11) (quote i12))))) nil "ADDITIONAL-INDEX-RULES"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 201 67) (quote "These selected rules will result in all four R-invariant Link-Chords.") "" (om-make-point 868 169) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 542 318) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TIME 2" (quote time) (quote ((om-load-inputfun (quote input-funbox) "FORM" "FORM" nil))) (om-make-point 780 617) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH 4" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 695 612) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TIME" (quote time) (quote ((om-load-inputfun (quote input-funbox) "FORM" "FORM" nil))) (om-make-point 210 618) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH 3" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 126 614) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PRIME-AIS" (quote om-ais::prime-ais) (quote nil) (om-make-point 689 530) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NORMAL-AIS" (quote om-ais::normal-ais) (quote nil) (om-make-point 116 524) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 271 32) (quote "PRIME FORM ALL INTERVAL SERIES") "" (om-make-point 616 496) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 167 42) (quote "Number of possible permutations.") "" (om-make-point 26 243) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 126 77) (quote "This index rule is for selecting prime form AIS.") "" (om-make-point 559 14) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 207 109) (quote "These index rules should be used to select:$- QI invariants;$- R invariants;$- QRMI invariants;$- LINK-CHORDS.") "" (om-make-point 703 14) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH 2" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 524 426) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "prime-form-AIS" (om-load-patch-abs1 "prime-form-AIS" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 115 436) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "=" (quote =) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 126 389) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 83 321) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 83 273) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 42 213) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD 2" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 24 243) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "- 2" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 14 177) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 1 134) (om-make-point 24 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 161 80) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 130 115) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "-" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 130 61) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "?2" 1 (om-make-point 99 0) "" "?2" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "?1" 0 (om-make-point 159 0) "" "?1" nil (om-make-point 24 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (9 0 1 1 nil 0) (3 0 2 0 nil 0) (5 0 3 0 nil 0) (9 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (7 0 6 0 nil 0) (9 0 6 1 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (11 0 10 0 nil 0) (12 0 10 1 nil 0))) 6.18 nil "" (om-make-point 235 120) (om-make-point 319 532)) (quote ((om-load-inputfun (quote input-funbox) "" "?1" nil) (om-load-inputfun (quote input-funbox) "" "?2" nil))) (om-make-point 506 77) nil (list nil) "l" "prime-form-AIS"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 607 121) (om-make-point 48 30) (list 1 2) "(1 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INDEX-RULE" (quote omcs::index-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "list" "INDEX-NUMBERS" (list 1)))) (om-make-point 531 161) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 271 32) (quote "NORMAL FORM ALL INTERVAL SERIES") "" (om-make-point 32 495) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-VIEW 3" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 498 486) (om-make-point 93 43) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 69 23) "untitled"))) (om-set-dialog-item-text rep "1928") rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 319 425) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-VIEW 2" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 293 484) (om-make-point 93 43) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 69 23) "untitled"))) (om-set-dialog-item-text rep "3856") rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 300 83) (quote "Based on the Patch from PWGL$(For more information, see PWGL Book, p.142,  by Mikael Laurson and Mika Kuuskankare, and PWConstraints, by Mikael Laurson.)") "" (om-make-point 64 0) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "no-dup-intervals 3" (om-load-patch-abs1 "no-dup-intervals" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 107 156) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 67 96) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "<=" (quote <=) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 78 199) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 21 442) (om-make-point 274 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 147 402) (om-make-point 24 30) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 198 97) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 127 98) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MEMBER" (quote member) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 202 328) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NOT" (quote not) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 214 381) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 266 279) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 252 144) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD 2" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 245 181) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 257 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 291 96) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 206 171) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 176 212) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 164 163) (om-make-point 24 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REV-PARTIAL-SOLUTION" (quote omcs::rev-partial-solution) (quote nil) (om-make-point 126 0) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 134 514) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((17 0 1 0 nil 0) (1 0 2 0 nil 0) (0 0 2 1 nil 0) (2 0 3 0 nil 0) (4 0 3 1 nil 0) (8 0 3 2 nil 0) (17 0 5 0 nil 0) (17 0 6 0 nil 0) (15 0 7 0 nil 0) (9 0 7 1 nil 0) (7 0 8 0 nil 0) (12 0 9 0 nil 0) (10 0 11 1 nil 0) (11 0 12 0 nil 0) (13 0 12 1 nil 0) (17 0 13 0 nil 0) (16 0 15 0 nil 0) (14 0 15 1 nil 0) (6 0 16 0 nil 0) (5 0 16 1 nil 0) (3 0 18 0 nil 0))) 6.18 nil "" (om-make-point 311 23) (om-make-point 416 634)) (quote nil) (om-make-point 407 70) nil (list nil) "l" "no-dup-intervals"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-VIEW" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 57 195) (om-make-point 93 43) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 69 23) "untitled"))) (om-set-dialog-item-text rep "3628800") rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 90 114) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FACTORIAL" (quote factorial) (quote ((om-load-inputfun (quote input-funbox) "N" "N" nil))) (om-make-point 79 148) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "no-dup-notes 2" (om-load-patch-abs1 "no-dup-notes" (quote ((let ((box (om-load-boxcall (quote lispfun) "NOT 2" (quote not) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 154 209) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MEMBER" (quote member) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 142 140) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 72 7) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 192 82) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REV-PARTIAL-SOLUTION" (quote omcs::rev-partial-solution) (quote nil) (om-make-point 195 3) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 143 279) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 1 1 nil 0) (4 0 3 0 nil 0) (0 0 5 0 nil 0))) 6.18 nil "" (om-make-point 0 24) (om-make-point 461 452)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 328 70) nil (list nil) "l" "no-dup-notes"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 484 314) (om-make-point 38 30) (quote :all) ":all" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 6" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 336 273) (om-make-point 93 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 281 150) (om-make-point 37 30) (list 6) "(6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 284 191) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PMC-ENGINE" (quote omcs::pmc-engine) (quote ((om-load-inputfun (quote input-funbox) "s-space" "S-SPACE" nil) (om-load-inputfun (quote input-funbox) "rules" "RULES" nil) (om-load-inputfun (quote input-funbox) "heuristic-rules" "HEURISTIC-RULES" nil) (om-load-inputfun (quote input-funbox) "fwc-rules" "FWC-RULES" nil) (om-load-inputfun (quote input-funbox) "sols-mode" "SOLS-MODE" (quote :all)) (om-load-inputfun (quote input-funbox) "random?" "RND?" nil) (om-load-inputfun (quote input-funbox) "print-indexnr?" "PRINT-FL" nil))) (om-make-point 259 349) (om-make-point 378 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WILDCARD-RULE 2" (quote omcs::wildcard-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil))) (om-make-point 433 151) (om-make-point 44 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WILDCARD-RULE" (quote omcs::wildcard-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil))) (om-make-point 337 147) (om-make-point 60 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 181 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 216 248) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 263 105) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 220 145) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 166 72) (om-make-point 149 30) (list 11 10 9 8 7 5 4 3 2 1) "(11 10 9 8 7 5 4 3 2 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 178 148) (om-make-point 37 30) (list 0) "(0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 3 0 nil 0) (7 0 4 0 nil 0) (6 0 5 0 nil 0) (8 0 6 0 nil 0) (31 0 13 0 nil 0) (14 0 16 0 nil 0) (15 0 16 1 nil 0) (13 0 18 0 nil 0) (31 0 19 0 nil 0) (19 0 20 0 nil 0) (25 0 23 0 nil 0) (24 0 25 0 nil 0) (33 0 28 0 nil 0) (32 0 28 1 nil 0) (16 0 28 2 nil 0) (0 3 28 3 nil 0) (0 1 28 4 nil 0) (29 0 30 0 nil 0) (35 0 31 0 nil 0) (28 0 31 1 nil 0) (27 0 31 4 nil 0) (2 0 31 5 nil 0) (22 0 32 0 nil 0) (26 0 33 0 nil 0) (39 0 34 0 nil 0) (34 0 35 0 nil 0) (37 0 35 1 nil 0) (30 0 35 2 nil 0) (38 0 37 0 nil 0) (36 0 37 1 nil 0))) nil 6.18))